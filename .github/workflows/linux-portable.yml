name: Build Linux Portable

# Linux portable build workflow adapted from windows-portable.yml. This workflow includes:
# - Parallel language server downloads with retry logic and caching
# - Full PyInstaller build with Linux-optimized flags
# - Enhanced error handling and quality checks
# - Support for workflow_call for reusability
# - Multiple bundle tiers (minimal, essential, complete, full)
# - Both x64 (amd64) and arm64 (aarch64) architecture support
# - Linux-specific runtime handling and permissions

on:
  workflow_dispatch:
    inputs:
      bundle_tier:
        description: 'Bundle tier selection (use "all" to build all tiers)'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'minimal'
          - 'essential'
          - 'complete'
          - 'full'
      architecture:
        description: 'Target architecture'
        required: true
        default: 'x64'
        type: choice
        options:
          - 'x64'
          - 'arm64'
          - 'both'
      pyinstaller_debug:
        description: 'Enable PyInstaller debug mode'
        required: false
        default: false
        type: boolean
      upload_artifacts:
        description: 'Upload build artifacts'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      bundle_tier:
        description: 'Bundle tier selection (use "all" to build all tiers)'
        required: false
        default: 'all'
        type: string
      architecture:
        description: 'Target architecture'
        required: false
        default: 'x64'
        type: string
      pyinstaller_debug:
        description: 'Enable PyInstaller debug mode'
        required: false
        default: false
        type: boolean
      upload_artifacts:
        description: 'Upload build artifacts'
        required: false
        default: true
        type: boolean
  release:
    types: [created]

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "latest"

concurrency:
  group: linux-portable-${{ github.workflow }}-${{ github.ref }}-${{ inputs.bundle_tier || 'release' }}-${{ inputs.architecture || 'x64' }}
  cancel-in-progress: true

jobs:
  # Pre-download language servers in parallel to speed up builds
  download-language-servers:
    name: Download Language Servers
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        server_group:
          - essential
          - additional

    outputs:
      essential-cache-key: ${{ steps.cache-essential.outputs.cache-primary-key }}
      additional-cache-key: ${{ steps.cache-additional.outputs.cache-primary-key }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Essential Language Servers
        id: cache-essential
        if: matrix.server_group == 'essential'
        uses: actions/cache@v4
        with:
          path: language_servers_essential
          key: language-servers-essential-linux-v3-${{ hashFiles('scripts/build-windows/language-servers-manifest.json') }}
          restore-keys: |
            language-servers-essential-linux-v3-
            language-servers-essential-linux-

      - name: Cache Additional Language Servers
        id: cache-additional
        if: matrix.server_group == 'additional'
        uses: actions/cache@v4
        with:
          path: language_servers_additional
          key: language-servers-additional-linux-v3-${{ hashFiles('scripts/build-windows/language-servers-manifest.json') }}
          restore-keys: |
            language-servers-additional-linux-v3-
            language-servers-additional-linux-

      - name: Download Essential Language Servers
        if: matrix.server_group == 'essential' && steps.cache-essential.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p language_servers_essential

          # Download essential servers in parallel with retry logic
          download_with_retry() {
            local url="$1"
            local output="$2"
            local type="$3"
            local retries=3
            local delay=5

            for i in $(seq 1 $retries); do
              echo "Attempt $i: Downloading $url"
              if curl -fsSL --connect-timeout 30 --max-time 300 "$url" -o "$output"; then
                return 0
              fi

              if [ $i -lt $retries ]; then
                echo "Download failed, retrying in ${delay}s..."
                sleep $delay
                delay=$((delay * 2))
              fi
            done

            echo "Failed to download after $retries attempts: $url"
            return 1
          }

          # Essential language servers (Linux versions)
          (
            # Pyright v1.1.405 (latest stable release) - platform-agnostic npm package
            download_with_retry "https://registry.npmjs.org/pyright/-/pyright-1.1.405.tgz" "language_servers_essential/pyright.tgz" "npm" &&
            mkdir -p language_servers_essential/pyright &&
            tar -xzf language_servers_essential/pyright.tgz -C language_servers_essential/pyright --strip-components=1
          ) &

          (
            # TypeScript Language Server v4.4.0 (latest stable release) - platform-agnostic npm package
            download_with_retry "https://registry.npmjs.org/typescript-language-server/-/typescript-language-server-4.4.0.tgz" "language_servers_essential/typescript.tgz" "npm" &&
            mkdir -p language_servers_essential/typescript &&
            tar -xzf language_servers_essential/typescript.tgz -C language_servers_essential/typescript --strip-components=1
          ) &

          (
            # rust-analyzer latest x64 (Linux GNU version)
            download_with_retry "https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz" "language_servers_essential/rust-analyzer-x64.gz" "gz" &&
            mkdir -p language_servers_essential/rust-analyzer-x64 &&
            gunzip -c language_servers_essential/rust-analyzer-x64.gz > language_servers_essential/rust-analyzer-x64/rust-analyzer &&
            chmod +x language_servers_essential/rust-analyzer-x64/rust-analyzer
          ) &

          (
            # rust-analyzer latest ARM64 (Linux GNU version)
            download_with_retry "https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-aarch64-unknown-linux-gnu.gz" "language_servers_essential/rust-analyzer-arm64.gz" "gz" &&
            mkdir -p language_servers_essential/rust-analyzer-arm64 &&
            gunzip -c language_servers_essential/rust-analyzer-arm64.gz > language_servers_essential/rust-analyzer-arm64/rust-analyzer &&
            chmod +x language_servers_essential/rust-analyzer-arm64/rust-analyzer
          ) &

          (
            # gopls v0.20.0 x64 (Linux AMD64 version)
            download_with_retry "https://github.com/golang/tools/releases/download/gopls/v0.20.0/gopls_v0.20.0_linux_amd64.tar.gz" "language_servers_essential/gopls-x64.tar.gz" "tar.gz" &&
            mkdir -p language_servers_essential/gopls-x64 &&
            tar -xzf language_servers_essential/gopls-x64.tar.gz -C language_servers_essential/gopls-x64 &&
            chmod +x language_servers_essential/gopls-x64/gopls
          ) &

          (
            # gopls v0.20.0 ARM64 (Linux ARM64 version)
            download_with_retry "https://github.com/golang/tools/releases/download/gopls/v0.20.0/gopls_v0.20.0_linux_arm64.tar.gz" "language_servers_essential/gopls-arm64.tar.gz" "tar.gz" &&
            mkdir -p language_servers_essential/gopls-arm64 &&
            tar -xzf language_servers_essential/gopls-arm64.tar.gz -C language_servers_essential/gopls-arm64 &&
            chmod +x language_servers_essential/gopls-arm64/gopls
          ) &

          (
            # Eclipse JDT Language Server v1.50.0 (latest stable milestone) - platform-agnostic Java
            download_with_retry "https://download.eclipse.org/jdtls/milestones/1.50.0/jdt-language-server-1.50.0-202409261450.tar.gz" "language_servers_essential/java.tar.gz" "tar" &&
            mkdir -p language_servers_essential/java &&
            tar -xzf language_servers_essential/java.tar.gz -C language_servers_essential/java
          ) &

          # Wait for all downloads to complete
          wait

          echo "Essential language servers downloaded successfully"
          find language_servers_essential -type f | head -20

      - name: Download Additional Language Servers
        if: matrix.server_group == 'additional' && steps.cache-additional.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p language_servers_additional

          # Download additional servers in parallel with retry logic
          download_with_retry() {
            local url="$1"
            local output="$2"
            local type="$3"
            local retries=3
            local delay=5

            for i in $(seq 1 $retries); do
              echo "Attempt $i: Downloading $url"
              if curl -fsSL --connect-timeout 30 --max-time 300 "$url" -o "$output"; then
                return 0
              fi

              if [ $i -lt $retries ]; then
                echo "Download failed, retrying in ${delay}s..."
                sleep $delay
                delay=$((delay * 2))
              fi
            done

            echo "Failed to download after $retries attempts: $url"
            return 1
          }

          # Additional language servers with version comments
          (
            # OmniSharp-Roslyn v1.39.14 x64 (Linux version)
            download_with_retry "https://roslynomnisharp.blob.core.windows.net/releases/1.39.14/omnisharp-linux-x64-1.39.14.tar.gz" "language_servers_additional/omnisharp-x64.tar.gz" "tar.gz" &&
            mkdir -p language_servers_additional/omnisharp-x64 &&
            tar -xzf language_servers_additional/omnisharp-x64.tar.gz -C language_servers_additional/omnisharp-x64 &&
            chmod +x language_servers_additional/omnisharp-x64/OmniSharp || true
          ) &

          (
            # OmniSharp-Roslyn v1.39.14 ARM64 (Linux version)
            download_with_retry "https://roslynomnisharp.blob.core.windows.net/releases/1.39.14/omnisharp-linux-arm64-1.39.14.tar.gz" "language_servers_additional/omnisharp-arm64.tar.gz" "tar.gz" &&
            mkdir -p language_servers_additional/omnisharp-arm64 &&
            tar -xzf language_servers_additional/omnisharp-arm64.tar.gz -C language_servers_additional/omnisharp-arm64 &&
            chmod +x language_servers_additional/omnisharp-arm64/OmniSharp || true
          ) &

          (
            # Lua Language Server v3.15.0 x64 (Linux version)
            download_with_retry "https://github.com/LuaLS/lua-language-server/releases/download/3.15.0/lua-language-server-3.15.0-linux-x64.tar.gz" "language_servers_additional/lua-ls-x64.tar.gz" "tar.gz" &&
            mkdir -p language_servers_additional/lua-ls-x64 &&
            tar -xzf language_servers_additional/lua-ls-x64.tar.gz -C language_servers_additional/lua-ls-x64 &&
            chmod +x language_servers_additional/lua-ls-x64/bin/lua-language-server || true
          ) &

          (
            # Lua Language Server v3.15.0 ARM64 (Linux version)
            download_with_retry "https://github.com/LuaLS/lua-language-server/releases/download/3.15.0/lua-language-server-3.15.0-linux-arm64.tar.gz" "language_servers_additional/lua-ls-arm64.tar.gz" "tar.gz" &&
            mkdir -p language_servers_additional/lua-ls-arm64 &&
            tar -xzf language_servers_additional/lua-ls-arm64.tar.gz -C language_servers_additional/lua-ls-arm64 &&
            chmod +x language_servers_additional/lua-ls-arm64/bin/lua-language-server || true
          ) &

          (
            # Bash Language Server v5.6.0 (platform-agnostic npm package)
            download_with_retry "https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.6.0.tgz" "language_servers_additional/bash-ls.tgz" "npm" &&
            mkdir -p language_servers_additional/bash-ls &&
            tar -xzf language_servers_additional/bash-ls.tgz -C language_servers_additional/bash-ls --strip-components=1
          ) &

          # Wait for all downloads to complete
          wait

          echo "Additional language servers downloaded successfully"
          find language_servers_additional -type f | head -20

  build-portable:
    name: Build Portable (${{ matrix.arch }}, ${{ matrix.bundle_tier }})
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm64' || 'ubuntu-latest' }}
    timeout-minutes: 60
    needs: download-language-servers
    strategy:
      fail-fast: false
      matrix:
        arch: ${{ fromJson(inputs.architecture == 'both' && '["x64", "arm64"]' || format('["{0}"]', inputs.architecture || 'x64')) }}
        bundle_tier: ${{ fromJson(inputs.bundle_tier == 'all' && '["essential", "complete", "full"]' || (inputs.bundle_tier && format('["{0}"]', inputs.bundle_tier) || '["essential", "complete", "full"]')) }}

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          echo "Installing system dependencies..."

          # Update package lists
          sudo apt-get update

          # Install build essentials and required libraries
          sudo apt-get install -y \
            build-essential \
            binutils \
            patchelf \
            upx-ucl \
            zlib1g-dev \
            libffi-dev \
            libssl-dev \
            libbz2-dev \
            libreadline-dev \
            libsqlite3-dev \
            llvm \
            libncurses5-dev \
            libncursesw5-dev \
            xz-utils \
            tk-dev \
            liblzma-dev

          echo "System dependencies installed successfully"

      - name: Install UV package manager
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      # Enhanced cache strategy for dependencies
      - name: Cache UV dependencies
        id: cache-uv-deps
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: uv-linux-${{ matrix.arch }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}-v2
          restore-keys: |
            uv-linux-${{ matrix.arch }}-${{ env.PYTHON_VERSION }}-
            uv-linux-${{ matrix.arch }}-

      # Prepare environment directories
      - name: Prepare build environment
        run: |
          # Create necessary directories
          mkdir -p "$HOME/.serena/language_servers/static"
          mkdir -p "build/language_servers"
          mkdir -p "build/runtimes"
          mkdir -p "build/pyinstaller"
          mkdir -p "dist"

          # Set environment variables for portable build
          echo "SERENA_PORTABLE_BUILD=1" >> $GITHUB_ENV
          echo "SERENA_BUNDLE_TIER=${{ matrix.bundle_tier }}" >> $GITHUB_ENV
          echo "SERENA_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "RUNTIMES_DIR=${{ github.workspace }}/build/runtimes" >> $GITHUB_ENV

      # Restore cached language servers from download job
      - name: Restore Essential Language Servers
        if: matrix.bundle_tier == 'essential' || matrix.bundle_tier == 'complete' || matrix.bundle_tier == 'full'
        uses: actions/cache/restore@v4
        with:
          path: language_servers_essential
          key: language-servers-essential-linux-v3-${{ hashFiles('scripts/build-windows/language-servers-manifest.json') }}
          restore-keys: |
            language-servers-essential-linux-v3-
            language-servers-essential-linux-
          fail-on-cache-miss: false

      - name: Restore Additional Language Servers
        if: matrix.bundle_tier == 'complete' || matrix.bundle_tier == 'full'
        uses: actions/cache/restore@v4
        with:
          path: language_servers_additional
          key: language-servers-additional-linux-v3-${{ hashFiles('scripts/build-windows/language-servers-manifest.json') }}
          restore-keys: |
            language-servers-additional-linux-v3-
            language-servers-additional-linux-
          fail-on-cache-miss: false

      # Set up virtual environment
      - name: Create virtual environment
        if: steps.cache-uv-deps.outputs.cache-hit != 'true'
        run: |
          uv venv --python ${{ env.PYTHON_VERSION }}

      # Install dependencies with PyInstaller
      - name: Install dependencies
        run: |
          # Use optimized UV settings for faster downloads
          export UV_CONCURRENT_DOWNLOADS=10
          export UV_HTTP_TIMEOUT=300
          export UV_CACHE_DIR="$HOME/.cache/uv"

          # Install project in development mode
          uv pip install -e ".[dev]"
          uv pip install pyinstaller==6.11.1

          # Verify UV virtual environment setup
          echo "Verifying UV virtual environment setup..."
          if [ -f ".venv/bin/activate" ]; then
            echo "[OK] Virtual environment activation script found"
          else
            echo "[WARNING] Virtual environment activation script not found"
          fi

          # Test UV environment functionality
          echo "Testing UV environment..."
          uv run python --version
          uv run pip list | grep poethepoet || true

      # Setup language servers from cached downloads
      - name: Setup Essential Language Servers
        if: matrix.bundle_tier == 'essential' || matrix.bundle_tier == 'complete' || matrix.bundle_tier == 'full'
        run: |
          set -e

          echo "Setting up essential language servers for ${{ matrix.arch }}..."

          targetDir="build/language_servers"
          mkdir -p "$targetDir"

          # Copy pre-downloaded essential servers
          if [ -d "language_servers_essential" ]; then
            # Determine architecture suffix
            archSuffix="${{ matrix.arch }}"

            # Copy platform-agnostic servers (npm packages)
            if [ -d "language_servers_essential/pyright" ]; then
              cp -r "language_servers_essential/pyright" "$targetDir/pyright"
            fi

            if [ -d "language_servers_essential/typescript" ]; then
              cp -r "language_servers_essential/typescript" "$targetDir/typescript"
            fi

            # Copy architecture-specific servers
            if [ -d "language_servers_essential/rust-analyzer-$archSuffix" ]; then
              cp -r "language_servers_essential/rust-analyzer-$archSuffix" "$targetDir/rust-analyzer"
              chmod +x "$targetDir/rust-analyzer/rust-analyzer" || true
            fi

            if [ -d "language_servers_essential/gopls-$archSuffix" ]; then
              cp -r "language_servers_essential/gopls-$archSuffix" "$targetDir/gopls"
              chmod +x "$targetDir/gopls/gopls" || true
            fi

            # Copy Java (Eclipse JDT) - platform-agnostic
            if [ -d "language_servers_essential/java" ]; then
              cp -r "language_servers_essential/java" "$targetDir/java"
            fi

            echo "Essential language servers setup completed"
            ls -la "$targetDir"
          else
            echo "[WARNING] Essential language servers cache not found"
          fi

      - name: Setup Additional Language Servers
        if: matrix.bundle_tier == 'complete' || matrix.bundle_tier == 'full'
        run: |
          set -e

          echo "Setting up additional language servers for ${{ matrix.arch }}..."

          targetDir="build/language_servers"

          # Copy pre-downloaded additional servers
          if [ -d "language_servers_additional" ]; then
            # Determine architecture suffix
            archSuffix="${{ matrix.arch }}"

            # Copy architecture-specific servers
            if [ -d "language_servers_additional/omnisharp-$archSuffix" ]; then
              cp -r "language_servers_additional/omnisharp-$archSuffix" "$targetDir/omnisharp"
              chmod +x "$targetDir/omnisharp/OmniSharp" || true
            fi

            if [ -d "language_servers_additional/lua-ls-$archSuffix" ]; then
              cp -r "language_servers_additional/lua-ls-$archSuffix" "$targetDir/lua-ls"
              find "$targetDir/lua-ls" -type f -name "lua-language-server" -exec chmod +x {} \; || true
            fi

            # Copy platform-agnostic servers
            if [ -d "language_servers_additional/bash-ls" ]; then
              cp -r "language_servers_additional/bash-ls" "$targetDir/bash-ls"
            fi

            echo "Additional language servers setup completed"
            ls -la "$targetDir"
          else
            echo "[WARNING] Additional language servers cache not found"
          fi

      # Run quality checks with Linux-optimized UV commands
      - name: Run code quality checks
        run: |
          echo "Running code quality checks..."

          # Ensure virtual environment is activated for UV commands
          export VIRTUAL_ENV=".venv"

          # Use direct UV commands with explicit error handling
          echo "Running black formatting check..."
          if uv run black --check src scripts test; then
            echo "[OK] Black formatting check passed"
          else
            echo "[FAIL] Black formatting check failed"
            exit 1
          fi

          echo "Running ruff linting check..."
          if uv run ruff check src scripts test; then
            echo "[OK] Ruff linting check passed"
          else
            echo "[FAIL] Ruff linting check failed"
            exit 1
          fi

          echo "Running mypy type checking..."
          if uv run mypy src/serena; then
            echo "[OK] MyPy type checking passed"
          else
            echo "[FAIL] MyPy type checking failed"
            exit 1
          fi

          echo "All quality checks passed successfully!"

      # Build with PyInstaller
      - name: Build portable executable
        run: |
          set -e

          echo "Building Serena portable executable..."

          # Diagnostic information
          echo "=== Build Environment ==="
          echo "Python Version: $(python --version)"
          echo "UV Version: $(uv --version)"
          echo "Working Directory: $(pwd)"
          echo "Project Root: ${{ github.workspace }}"
          echo "Language Servers Dir: build/language_servers"
          echo "========================="

          # Determine output name
          bundleSuffix="${{ matrix.bundle_tier }}"
          archSuffix="${{ matrix.arch }}"
          version=$(grep 'version = ' pyproject.toml | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          outputName="serena-linux-${archSuffix}-${bundleSuffix}-${version}"

          # Build PyInstaller arguments array
          pyinstallerArgs=(
            "--name" "$outputName"
            "--onefile"
            "--console"
            "--clean"
            "--noconfirm"
            "--optimize" "2"
            "--strip"
            "--exclude-module" "tkinter"
            "--exclude-module" "matplotlib"
            "--exclude-module" "PIL"
            "--exclude-module" "numpy"
            "--exclude-module" "pandas"
            "--distpath" "dist"
            "--workpath" "build/pyinstaller"
            "--specpath" "build"
          )

          # Add verbose logging flags
          pyinstallerArgs+=("--log-level" "INFO")

          # Add debug flags if requested
          if [ "${{ inputs.pyinstaller_debug || 'false' }}" = "true" ]; then
            pyinstallerArgs+=("--debug" "all" "--log-level" "DEBUG")
          fi

          # Include language servers in bundle
          if [ -d "build/language_servers" ]; then
            workspaceRoot=$(pwd)
            langServersPath="${workspaceRoot}/build/language_servers"
            pyinstallerArgs+=("--add-data" "${langServersPath}:language_servers")
            echo "Language servers found - will be included in bundle"
            echo "Using absolute path: $langServersPath"
            ls -la "build/language_servers"
          else
            echo "No language servers found in build/language_servers"
          fi

          # Add source packages with absolute paths
          serenaPath="${workspaceRoot}/src/serena"
          solidlspPath="${workspaceRoot}/src/solidlsp"
          interpromptPath="${workspaceRoot}/src/interprompt"
          pyinstallerArgs+=(
            "--add-data" "${serenaPath}:serena"
            "--add-data" "${solidlspPath}:solidlsp"
            "--add-data" "${interpromptPath}:interprompt"
          )

          # Hidden imports for dynamic loading
          hiddenImports=(
            "serena.agent"
            "serena.cli"
            "serena.util.logging"
            "serena.util.exception"
            "serena.runtime_manager"
            "solidlsp.ls"
            "solidlsp.util.subprocess_util"
            "solidlsp.util.zip"
            "mcp"
            "mcp.server.fastmcp.server"
            "mcp.server.fastmcp.utilities.func_metadata"
            "mcp.server.fastmcp.tools.base"
            "anthropic"
            "requests"
            "yaml"
            "jinja2"
            "click"
            "pydantic"
            "pydantic_settings"
            "docstring_parser"
            "psutil"
            "tqdm"
            "tiktoken"
            "joblib"
            "pathspec"
            "ruamel.yaml"
            "ruamel.yaml.main"
            "ruamel.yaml.loader"
            "ruamel.yaml.dumper"
            "sensai.util.logging"
            "sensai.util.string"
            "sensai.util.git"
          )

          for import in "${hiddenImports[@]}"; do
            pyinstallerArgs+=("--hidden-import" "$import")
          done

          # Entry point
          pyinstallerArgs+=("src/serena/cli.py")

          echo "PyInstaller command: uv run pyinstaller ${pyinstallerArgs[*]}"

          # Suppress deprecation warnings
          export PYTHONWARNINGS="ignore::DeprecationWarning:pkg_resources,ignore::DeprecationWarning:altgraph"

          echo "Starting PyInstaller build process..."

          # Run PyInstaller
          uv run pyinstaller "${pyinstallerArgs[@]}"

          # Verify the executable was created
          exePath="dist/${outputName}"
          if [ ! -f "$exePath" ]; then
            echo "ERROR: Executable not found at $exePath"
            exit 1
          fi

          # Make executable
          chmod +x "$exePath"

          fileSize=$(du -h "$exePath" | cut -f1)
          echo "Built executable: $exePath ($fileSize)"

          # Test the executable
          echo "Testing executable..."
          echo "Executable path: $exePath"
          echo "Working directory: $(pwd)"

          # Test basic loading
          echo "Testing basic executable loading..."
          if "$exePath" --help; then
            echo "Basic executable test passed!"

            # Test version
            echo "Testing version command..."
            if "$exePath" --version; then
              echo "Version test passed!"
            else
              echo "[WARNING] Version test failed with exit code $?"
            fi
          else
            echo "[WARNING] Basic executable test failed with exit code $?"
          fi

          echo "Build completed successfully - executable created!"

      # Create bundle with documentation and examples
      - name: Create distribution bundle
        run: |
          set -e

          bundleSuffix="${{ matrix.bundle_tier }}"
          archSuffix="${{ matrix.arch }}"
          version=$(grep 'version = ' pyproject.toml | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          outputName="serena-linux-${archSuffix}-${bundleSuffix}-${version}"
          bundleDir="dist/${outputName}-bundle"

          echo "Creating distribution bundle: $bundleDir"

          # Create bundle directory structure
          mkdir -p "$bundleDir/bin"
          mkdir -p "$bundleDir/docs"
          mkdir -p "$bundleDir/examples"

          # Copy executable
          cp "dist/${outputName}" "$bundleDir/bin/serena"
          chmod +x "$bundleDir/bin/serena"

          # Copy documentation files
          [ -f "README.md" ] && cp "README.md" "$bundleDir/README.md"
          [ -f "LICENSE" ] && cp "LICENSE" "$bundleDir/LICENSE"
          [ -f "CLAUDE.md" ] && cp "CLAUDE.md" "$bundleDir/docs/"

          # Create installation script (bash)
          cat > "$bundleDir/install.sh" << 'EOF'
#!/bin/bash
set -e

echo "Serena Linux Portable Installation"
echo "==================================="
echo ""

INSTALL_DIR="$HOME/.local/serena"
BIN_DIR="$INSTALL_DIR/bin"

echo "Creating installation directory: $INSTALL_DIR"
mkdir -p "$INSTALL_DIR"
mkdir -p "$BIN_DIR"

echo "Copying Serena executable..."
cp "bin/serena" "$BIN_DIR/serena"
chmod +x "$BIN_DIR/serena"

echo "Adding to PATH..."
SHELL_RC=""
if [ -n "$BASH_VERSION" ]; then
  SHELL_RC="$HOME/.bashrc"
elif [ -n "$ZSH_VERSION" ]; then
  SHELL_RC="$HOME/.zshrc"
else
  SHELL_RC="$HOME/.profile"
fi

if ! grep -q "$BIN_DIR" "$SHELL_RC" 2>/dev/null; then
  echo "export PATH=\"\$PATH:$BIN_DIR\"" >> "$SHELL_RC"
  echo "Added $BIN_DIR to PATH in $SHELL_RC"
else
  echo "Directory already in PATH"
fi

echo ""
echo "Installation complete!"
echo "Run 'source $SHELL_RC' or restart your terminal to use 'serena' command."
echo ""
echo "To verify installation, run: serena --version"
echo ""
EOF

          chmod +x "$bundleDir/install.sh"

          # Create usage examples
          cat > "$bundleDir/examples/usage.md" << EOF
# Serena Usage Examples

## Basic Commands

# Start MCP server (for Claude Desktop integration)
serena-mcp-server

# Get version information
serena --version

# Get help
serena --help

## Language Server Bundle Information

This $bundleSuffix bundle includes:

EOF

          if [ "$bundleSuffix" = "essential" ] || [ "$bundleSuffix" = "complete" ] || [ "$bundleSuffix" = "full" ]; then
            cat >> "$bundleDir/examples/usage.md" << EOF
- Python (Pyright)
- TypeScript/JavaScript
- Rust (rust-analyzer)
- Go (gopls)
- Java (Eclipse JDT)
EOF
          fi

          if [ "$bundleSuffix" = "complete" ] || [ "$bundleSuffix" = "full" ]; then
            cat >> "$bundleDir/examples/usage.md" << EOF
- C# (OmniSharp)
- Lua
- Bash
EOF
          fi

          if [ "$bundleSuffix" = "full" ]; then
            cat >> "$bundleDir/examples/usage.md" << EOF
- Additional language servers (28 total)
EOF
          fi

          # Create tar.gz archive
          tarPath="dist/${outputName}-bundle.tar.gz"
          echo "Creating tar.gz archive: $tarPath"

          tar -czf "$tarPath" -C "dist" "$(basename "$bundleDir")"

          tarSize=$(du -h "$tarPath" | cut -f1)
          echo "Created bundle tar.gz: $tarPath ($tarSize)"

      # Upload artifacts (only if enabled)
      - name: Upload build artifacts
        if: inputs.upload_artifacts != false
        uses: actions/upload-artifact@v4
        with:
          name: serena-linux-${{ matrix.arch }}-${{ matrix.bundle_tier }}
          path: |
            dist/serena-linux-*
            dist/*.tar.gz
          retention-days: 30
          compression-level: 6

      # Upload to release if this was triggered by a release
      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/serena-linux-*
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Generate build summary
      - name: Generate build summary
        run: |
          bundleSuffix="${{ matrix.bundle_tier }}"
          archSuffix="${{ matrix.arch }}"
          version=$(grep 'version = ' pyproject.toml | head -1 | sed 's/.*version = "\(.*\)".*/\1/')
          outputName="serena-linux-${archSuffix}-${bundleSuffix}-${version}"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: ${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Tier**: ${{ matrix.bundle_tier }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "dist/${outputName}" ]; then
            exeSize=$(du -h "dist/${outputName}" | cut -f1)
            echo "- **Executable Size**: $exeSize" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "dist/${outputName}-bundle.tar.gz" ]; then
            tarSize=$(du -h "dist/${outputName}-bundle.tar.gz" | cut -f1)
            echo "- **Bundle Size**: $tarSize" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Language Servers Included" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          case "$bundleSuffix" in
            "minimal")
              echo "- None (minimal build)" >> $GITHUB_STEP_SUMMARY
              ;;
            "essential")
              echo "- Python (Pyright)" >> $GITHUB_STEP_SUMMARY
              echo "- TypeScript/JavaScript" >> $GITHUB_STEP_SUMMARY
              echo "- Rust (rust-analyzer)" >> $GITHUB_STEP_SUMMARY
              echo "- Go (gopls)" >> $GITHUB_STEP_SUMMARY
              echo "- Java (Eclipse JDT)" >> $GITHUB_STEP_SUMMARY
              ;;
            "complete")
              echo "- Python (Pyright)" >> $GITHUB_STEP_SUMMARY
              echo "- TypeScript/JavaScript" >> $GITHUB_STEP_SUMMARY
              echo "- Rust (rust-analyzer)" >> $GITHUB_STEP_SUMMARY
              echo "- Go (gopls)" >> $GITHUB_STEP_SUMMARY
              echo "- Java (Eclipse JDT)" >> $GITHUB_STEP_SUMMARY
              echo "- C# (OmniSharp)" >> $GITHUB_STEP_SUMMARY
              echo "- Lua Language Server" >> $GITHUB_STEP_SUMMARY
              echo "- Bash Language Server" >> $GITHUB_STEP_SUMMARY
              ;;
            "full")
              echo "- Python (Pyright)" >> $GITHUB_STEP_SUMMARY
              echo "- TypeScript/JavaScript" >> $GITHUB_STEP_SUMMARY
              echo "- Rust (rust-analyzer)" >> $GITHUB_STEP_SUMMARY
              echo "- Go (gopls)" >> $GITHUB_STEP_SUMMARY
              echo "- Java (Eclipse JDT)" >> $GITHUB_STEP_SUMMARY
              echo "- C# (OmniSharp)" >> $GITHUB_STEP_SUMMARY
              echo "- Lua Language Server" >> $GITHUB_STEP_SUMMARY
              echo "- Bash Language Server" >> $GITHUB_STEP_SUMMARY
              echo "- All 28 supported language servers" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

  # Create a summary job that runs after all builds complete
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-portable
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate final summary
        shell: bash
        run: |
          echo "# Linux Portable Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-portable.result }}" == "success" ]; then
            echo "✅ **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Key Features" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Parallel language server downloads** - Up to 6x faster downloads" >> $GITHUB_STEP_SUMMARY
          echo "- 🗂️ **Enhanced caching strategy** - Better cache hit rates and reuse" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **Optimized PyInstaller flags** - Smaller executables with --strip" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Network retry logic** - Robust handling of download failures" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ **Sequential quality checks** - Reliable linting and type checking" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Efficient bundle creation** - Parallel file operations" >> $GITHUB_STEP_SUMMARY
          echo "- 🐧 **Linux-native binaries** - Native language servers for x64 and ARM64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List all created artifacts
          find artifacts -type f \( -name "serena-linux-*" -o -name "*.tar.gz" \) 2>/dev/null | while read file; do
            size=$(du -h "$file" | cut -f1)
            basename_file=$(basename "$file")
            echo "- **$basename_file** ($size)" >> $GITHUB_STEP_SUMMARY
          done || echo "- No artifacts found" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Installation Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the appropriate bundle for your architecture and needs" >> $GITHUB_STEP_SUMMARY
          echo "2. Extract the tar.gz file: \`tar -xzf serena-linux-*.tar.gz\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Run \`./install.sh\` from the extracted directory" >> $GITHUB_STEP_SUMMARY
          echo "4. Restart your terminal or run \`source ~/.bashrc\` (or your shell's rc file)" >> $GITHUB_STEP_SUMMARY
          echo "5. Verify installation with \`serena --version\`" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Bundle Types" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **minimal**: Core Serena functionality only" >> $GITHUB_STEP_SUMMARY
          echo "- **essential**: Core + Python, TypeScript, Rust, Go, Java language servers" >> $GITHUB_STEP_SUMMARY
          echo "- **complete**: Essential + C#, Lua, Bash language servers" >> $GITHUB_STEP_SUMMARY
          echo "- **full**: All 28+ supported language servers included" >> $GITHUB_STEP_SUMMARY

name: Test Windows Portable Build

on:
  pull_request:
    paths:
      - 'scripts/build-windows/**'
      - '.github/workflows/windows-portable.yml'
      - '.github/workflows/test-windows-portable.yml'
      - 'src/**'
      - 'pyproject.toml'
      - 'uv.lock'
  push:
    branches: [main]
    paths:
      - 'scripts/build-windows/**' 
      - '.github/workflows/windows-portable.yml'
      - '.github/workflows/test-windows-portable.yml'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'quick'
        type: choice
        options:
          - 'quick'
          - 'full'

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "latest"

concurrency:
  group: test-windows-portable-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick syntax and validation tests
  syntax-validation:
    name: Syntax & URL Validation
    runs-on: windows-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PowerShell execution policy
        shell: powershell
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

      - name: Test PowerShell script syntax
        shell: powershell
        run: |
          Write-Host "Testing PowerShell script syntax..." -ForegroundColor Green
          
          $scripts = @(
            "scripts/build-windows/build-portable.ps1",
            "scripts/build-windows/test-portable.ps1",
            "scripts/build-windows/download-language-servers.ps1"
          )
          
          $errors = @()
          foreach ($script in $scripts) {
            if (Test-Path $script) {
              Write-Host "Checking syntax: $script" -ForegroundColor Cyan
              
              try {
                $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $script -Raw), [ref]$null)
                Write-Host "[OK] $script syntax OK" -ForegroundColor Green
              } catch {
                Write-Host "[FAIL] $script syntax error: $_" -ForegroundColor Red
                $errors += "$script : $_"
              }
            } else {
              Write-Warning "Script not found: $script"
              $errors += "$script : File not found"
            }
          }
          
          if ($errors.Count -gt 0) {
            Write-Host "PowerShell syntax errors found:" -ForegroundColor Red
            $errors | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
            exit 1
          } else {
            Write-Host "All PowerShell scripts passed syntax validation" -ForegroundColor Green
          }

      - name: Validate workflow syntax
        shell: powershell
        run: |
          Write-Host "Validating GitHub workflow files..." -ForegroundColor Green
          
          $workflows = @(
            ".github/workflows/windows-portable.yml",
            ".github/workflows/test-windows-portable.yml"
          )
          
          foreach ($workflow in $workflows) {
            if (Test-Path $workflow) {
              Write-Host "Checking: $workflow" -ForegroundColor Cyan
              
              # Basic YAML structure validation
              try {
                $content = Get-Content $workflow -Raw
                
                # Check for required workflow elements
                $requiredElements = @("name:", "on:", "jobs:")
                foreach ($element in $requiredElements) {
                  if ($content -notmatch $element) {
                    throw "Missing required element: $element"
                  }
                }
                
                Write-Host "[OK] $workflow structure OK" -ForegroundColor Green
              } catch {
                Write-Host "[FAIL] $workflow validation error: $_" -ForegroundColor Red
                exit 1
              }
            }
          }

      - name: Test language server URLs
        shell: powershell
        run: |
          Write-Host "Testing language server URLs..." -ForegroundColor Green
          
          # Extract URLs from the windows-portable.yml workflow
          $workflowPath = ".github/workflows/windows-portable.yml"
          if (-not (Test-Path $workflowPath)) {
            Write-Warning "Workflow file not found: $workflowPath"
            exit 0
          }
          
          $content = Get-Content $workflowPath -Raw
          
          # Extract URLs using regex patterns
          $urlPatterns = @(
            'https://registry\.npmjs\.org/[^"]+',
            'https://github\.com/[^/]+/[^/]+/releases/download/[^"]+',
            'https://download\.eclipse\.org/[^"]+',
            'https://roslynomnisharp\.blob\.core\.windows\.net/[^"]+',
            'https://[^"]*\.zip',
            'https://[^"]*\.tgz',
            'https://[^"]*\.tar\.gz'
          )
          
          $allUrls = @()
          foreach ($pattern in $urlPatterns) {
            $matches = [regex]::Matches($content, $pattern)
            foreach ($match in $matches) {
              $allUrls += $match.Value
            }
          }
          
          $uniqueUrls = $allUrls | Sort-Object -Unique
          Write-Host "Found $($uniqueUrls.Count) unique URLs to test" -ForegroundColor Cyan
          
          $failedUrls = @()
          $checkedUrls = 0
          $maxChecks = 10  # Limit to first 10 URLs for quick test
          
          foreach ($url in $uniqueUrls) {
            if ($checkedUrls -ge $maxChecks) {
              Write-Host "Limiting URL checks to first $maxChecks URLs for quick validation" -ForegroundColor Yellow
              break
            }
            
            $checkedUrls++
            Write-Host "Checking URL: $url" -ForegroundColor Cyan
            
            try {
              $response = Invoke-WebRequest -Uri $url -Method Head -TimeoutSec 10 -UseBasicParsing
              if ($response.StatusCode -eq 200) {
                Write-Host "[OK] $url" -ForegroundColor Green
              } else {
                Write-Host "[FAIL] $url (Status: $($response.StatusCode))" -ForegroundColor Red
                $failedUrls += "$url (Status: $($response.StatusCode))"
              }
            } catch {
              Write-Host "[FAIL] $url (Error: $($_.Exception.Message))" -ForegroundColor Red
              $failedUrls += "$url (Error: $($_.Exception.Message))"
            }
          }
          
          if ($failedUrls.Count -gt 0) {
            Write-Host "Some URLs failed validation:" -ForegroundColor Red
            $failedUrls | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
            Write-Host "Note: URL failures may indicate temporary network issues or outdated links" -ForegroundColor Yellow
          } else {
            Write-Host "All checked URLs are accessible" -ForegroundColor Green
          }

      - name: Check PyInstaller compatibility  
        shell: powershell
        run: |
          Write-Host "Checking PyInstaller compatibility..." -ForegroundColor Green
          
          # Check if pyproject.toml exists and is valid
          if (Test-Path "pyproject.toml") {
            Write-Host "[OK] pyproject.toml found" -ForegroundColor Green
            
            $content = Get-Content "pyproject.toml" -Raw
            
            # Check for required project metadata
            $requiredFields = @("name", "version", "description")
            foreach ($field in $requiredFields) {
              if ($content -match "$field\s*=") {
                Write-Host "[OK] Found $field field" -ForegroundColor Green
              } else {
                Write-Host "[FAIL] Missing $field field" -ForegroundColor Red
                exit 1
              }
            }
            
            # Check for entry points or scripts
            if ($content -match "scripts" -or $content -match "entry-points") {
              Write-Host "[OK] Entry points/scripts configuration found" -ForegroundColor Green
            }
            
            # Look for main module files
            $mainModules = @("src/serena/cli.py", "src/serena/__main__.py", "src/serena/agent.py")
            $foundModule = $false
            foreach ($module in $mainModules) {
              if (Test-Path $module) {
                Write-Host "[OK] Found main module: $module" -ForegroundColor Green
                $foundModule = $true
                break
              }
            }
            
            if (-not $foundModule) {
              Write-Host "[FAIL] No main module found in expected locations" -ForegroundColor Red
              exit 1
            }
            
          } else {
            Write-Host "[FAIL] pyproject.toml not found" -ForegroundColor Red
            exit 1
          }

  # Matrix testing for different scenarios
  build-matrix-test:
    name: Build Matrix Test (${{ matrix.tier }}, ${{ matrix.arch }})
    runs-on: windows-latest
    timeout-minutes: 15
    needs: syntax-validation
    if: github.event.inputs.test_level == 'full' || contains(github.event_name, 'push')
    
    strategy:
      fail-fast: false
      matrix:
        tier: ['minimal', 'essential']
        arch: ['x64']
        include:
          - tier: 'complete'
            arch: 'x64'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.arch }}

      - name: Install UV package manager
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Test build script parameters
        shell: powershell
        run: |
          Write-Host "Testing build script with tier: ${{ matrix.tier }}, arch: ${{ matrix.arch }}" -ForegroundColor Green
          
          $buildScript = "scripts/build-windows/build-portable.ps1"
          if (-not (Test-Path $buildScript)) {
            Write-Host "[FAIL] Build script not found: $buildScript" -ForegroundColor Red
            exit 1
          }
          
          # Test parameter validation without actually building
          try {
            # This should not fail - just tests parameter binding
            $null = & $buildScript -WhatIf -Tier ${{ matrix.tier }} -Architecture ${{ matrix.arch }} -SkipTests -SkipLanguageServers -Verbose:$false 2>$null
            Write-Host "[OK] Build script accepts parameters correctly" -ForegroundColor Green
          } catch {
            if ($_.Exception.Message -match "WhatIf") {
              # WhatIf not supported is OK, means parameters were accepted
              Write-Host "[OK] Build script parameters validated (WhatIf not supported)" -ForegroundColor Green
            } else {
              Write-Host "[FAIL] Build script parameter error: $_" -ForegroundColor Red
              exit 1
            }
          }

      - name: Test dependency installation
        shell: powershell  
        run: |
          Write-Host "Testing dependency installation..." -ForegroundColor Green
          
          try {
            # Quick dependency sync test
            uv sync --dev --dry-run
            if ($LASTEXITCODE -eq 0) {
              Write-Host "[OK] Dependencies can be resolved" -ForegroundColor Green
            } else {
              Write-Host "[FAIL] Dependency resolution failed" -ForegroundColor Red
              exit 1
            }
            
            # Test PyInstaller installation simulation
            Write-Host "Testing PyInstaller dependency resolution..." -ForegroundColor Yellow
            $tempDir = New-TemporaryFile
            Remove-Item $tempDir
            New-Item -ItemType Directory -Path $tempDir | Out-Null
            Push-Location $tempDir
            try {
              # Create a minimal Python project
              uv init --no-workspace --no-readme --no-pin-python --name test-project | Out-Null
              if ($LASTEXITCODE -ne 0) { throw "Failed to initialize test project" }
              
              # Try to add pyinstaller without syncing
              uv add pyinstaller --no-sync | Out-Null
              if ($LASTEXITCODE -ne 0) { throw "Failed to add pyinstaller" }
              
              Write-Host "[OK] PyInstaller can be installed" -ForegroundColor Green
            } catch {
              Write-Host "[WARN] PyInstaller test skipped: $_" -ForegroundColor Yellow
              # Don't fail the test - this is not critical
            } finally {
              Pop-Location
              Remove-Item -Recurse -Force $tempDir -ErrorAction SilentlyContinue
            }
            
          } catch {
            Write-Host "[FAIL] Dependency test failed: $_" -ForegroundColor Red
            exit 1
          }

      - name: Quick smoke test
        shell: powershell
        run: |
          Write-Host "Running quick smoke tests..." -ForegroundColor Green
          
          # Install minimal dependencies for smoke test
          uv venv --python ${{ env.PYTHON_VERSION }}
          uv pip install -e "."
          
          # Test basic imports
          uv run python -c "import serena; print('[OK] Serena imports successfully')"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "[FAIL] Basic import test failed" -ForegroundColor Red
            exit 1
          }
          
          # Test CLI help
          uv run python -m serena --help > nul 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "[OK] CLI help works" -ForegroundColor Green
          } else {
            Write-Host "[FAIL] CLI help failed" -ForegroundColor Red
            exit 1
          }

  # Quick format and lint checks
  quality-check:
    name: Quality Check
    runs-on: windows-latest
    timeout-minutes: 10
    needs: syntax-validation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5  
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV package manager
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        shell: powershell
        run: |
          Write-Host "Installing project dependencies..." -ForegroundColor Green
          uv sync --dev
          if ($LASTEXITCODE -ne 0) {
            Write-Host "[FAIL] Failed to install dependencies" -ForegroundColor Red
            exit 1
          }
          Write-Host "[OK] Dependencies installed" -ForegroundColor Green

      - name: Run formatting check
        shell: powershell
        run: |
          Write-Host "Running code formatting check..." -ForegroundColor Green
          # Use python -m to ensure we're using the right environment
          uv run python -m poethepoet lint
          if ($LASTEXITCODE -eq 0) {
            Write-Host "[OK] Code formatting check passed" -ForegroundColor Green
          } else {
            Write-Host "[FAIL] Code formatting issues found" -ForegroundColor Red
            exit 1
          }

      - name: Run type checking
        shell: powershell
        run: |
          Write-Host "Running type checking..." -ForegroundColor Green
          uv run python -m poethepoet type-check
          if ($LASTEXITCODE -eq 0) {
            Write-Host "[OK] Type checking passed" -ForegroundColor Green
          } else {
            Write-Host "[FAIL] Type checking failed" -ForegroundColor Red
            exit 1
          }

  # Test the test script itself
  test-script-validation:
    name: Test Script Validation
    runs-on: windows-latest
    timeout-minutes: 5
    needs: syntax-validation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test portable test script
        shell: powershell
        run: |
          Write-Host "Testing portable test script functionality..." -ForegroundColor Green
          
          $testScript = "scripts/build-windows/test-portable.ps1"
          if (-not (Test-Path $testScript)) {
            Write-Host "[FAIL] Test script not found: $testScript" -ForegroundColor Red
            exit 1
          }
          
          # Test help parameter
          try {
            $helpOutput = & $testScript -? 2>&1
            Write-Host "[OK] Test script help output works" -ForegroundColor Green
          } catch {
            Write-Host "[FAIL] Test script help failed: $_" -ForegroundColor Red
            exit 1
          }
          
          # Create a dummy package structure for testing
          $testDir = "test-dummy-package"
          $testPackage = "dummy-serena-package"
          New-Item -ItemType Directory -Path $testDir -Force
          New-Item -ItemType Directory -Path "$testDir/$testPackage" -Force
          
          # Create minimal test files
          "echo 'Dummy version 1.0.0'" | Out-File "$testDir/$testPackage/serena.exe" -Encoding ascii
          "echo dummy readme" | Out-File "$testDir/$testPackage/README.txt" -Encoding ascii
          "@echo off`necho dummy launcher" | Out-File "$testDir/$testPackage/serena.bat" -Encoding ascii
          
          # Test with dummy package (should fail gracefully)
          try {
            $result = & $testScript -PackagePath "$testDir/$testPackage" -Quick -Timeout 5 2>&1
            Write-Host "[OK] Test script handles dummy package gracefully" -ForegroundColor Green
          } catch {
            Write-Host "[OK] Test script properly rejects invalid package (expected behavior)" -ForegroundColor Green
          }
          
          # Cleanup
          Remove-Item $testDir -Recurse -Force -ErrorAction SilentlyContinue

  # Generate test report
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [syntax-validation, quality-check, test-script-validation]
    if: always()
    
    steps:
      - name: Generate test summary
        shell: bash
        run: |
          echo "# Windows Portable Build Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          syntax_result="${{ needs.syntax-validation.result }}"
          quality_result="${{ needs.quality-check.result }}"
          test_script_result="${{ needs.test-script-validation.result }}"
          
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$syntax_result" == "success" ]; then
            echo "✅ **Syntax Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Syntax Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$quality_result" == "success" ]; then
            echo "✅ **Quality Check**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality Check**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$test_script_result" == "success" ]; then
            echo "✅ **Test Script Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Test Script Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## What Was Tested" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PowerShell script syntax validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub workflow YAML structure" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Language server URL accessibility" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PyInstaller compatibility checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code formatting and type checking" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test script functionality" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build parameter validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency resolution" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "If all tests pass, the portable build workflow should work correctly." >> $GITHUB_STEP_SUMMARY
          echo "For full validation, trigger the actual 'Build Windows Portable Serena' workflow." >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [ "$syntax_result" == "success" ] && [ "$quality_result" == "success" ] && [ "$test_script_result" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Overall Status**: ALL TESTS PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Overall Status**: SOME TESTS FAILED" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
name: Build macOS Portable (Simplified)

# SIMPLIFIED VERSION - Start with basics, add complexity later
# This workflow is intentionally simple to ensure it works:
# - Single architecture only (arm64)
# - Single bundle tier only (essential)
# - Manual trigger only (workflow_dispatch)
# - No complex matrix expressions
# - Hardcoded values where possible
# - Basic quality checks only (format + type-check)
# - No runtime downloads yet

on:
  workflow_dispatch:
    inputs:
      pyinstaller_debug:
        description: 'Enable PyInstaller debug mode'
        required: false
        default: false
        type: boolean
      upload_artifacts:
        description: 'Upload build artifacts'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "latest"
  BUNDLE_TIER: "essential"
  ARCHITECTURE: "arm64"

concurrency:
  group: macos-portable-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-download language servers in parallel to speed up builds
  download-language-servers:
    name: Download Language Servers
    runs-on: ubuntu-latest
    timeout-minutes: 30

    outputs:
      cache-key: ${{ steps.cache-essential.outputs.cache-primary-key }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Essential Language Servers
        id: cache-essential
        uses: actions/cache@v4
        with:
          path: language_servers_essential
          key: language-servers-macos-essential-v1-${{ hashFiles('scripts/build-macos/language-servers-manifest.json') }}
          restore-keys: |
            language-servers-macos-essential-v1-
            language-servers-macos-essential-

      - name: Download Essential Language Servers
        if: steps.cache-essential.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p language_servers_essential

          # Download with retry logic (copied from Windows workflow)
          download_with_retry() {
            local url="$1"
            local output="$2"
            local retries=3
            local delay=5

            for i in $(seq 1 $retries); do
              echo "Attempt $i: Downloading $url"
              if curl -fsSL --connect-timeout 30 --max-time 300 "$url" -o "$output"; then
                return 0
              fi

              if [ $i -lt $retries ]; then
                echo "Download failed, retrying in ${delay}s..."
                sleep $delay
                delay=$((delay * 2))
              fi
            done

            echo "Failed to download after $retries attempts: $url"
            return 1
          }

          # ESSENTIAL LANGUAGE SERVERS - macOS ARM64 ONLY
          # Simplified: Only the core servers, hardcoded versions

          # Pyright v1.1.405 (platform-independent npm package)
          (
            download_with_retry \
              "https://registry.npmjs.org/pyright/-/pyright-1.1.405.tgz" \
              "language_servers_essential/pyright.tgz" &&
            mkdir -p language_servers_essential/pyright &&
            tar -xzf language_servers_essential/pyright.tgz -C language_servers_essential/pyright --strip-components=1
          ) &

          # TypeScript Language Server v4.4.0 (platform-independent npm package)
          (
            download_with_retry \
              "https://registry.npmjs.org/typescript-language-server/-/typescript-language-server-4.4.0.tgz" \
              "language_servers_essential/typescript.tgz" &&
            mkdir -p language_servers_essential/typescript &&
            tar -xzf language_servers_essential/typescript.tgz -C language_servers_essential/typescript --strip-components=1
          ) &

          # rust-analyzer latest ARM64 macOS
          (
            download_with_retry \
              "https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-aarch64-apple-darwin.gz" \
              "language_servers_essential/rust-analyzer.gz" &&
            mkdir -p language_servers_essential/rust-analyzer &&
            gunzip -c language_servers_essential/rust-analyzer.gz > language_servers_essential/rust-analyzer/rust-analyzer &&
            chmod +x language_servers_essential/rust-analyzer/rust-analyzer
          ) &

          # gopls v0.20.0 ARM64 macOS (darwin_arm64)
          (
            download_with_retry \
              "https://github.com/golang/tools/releases/download/gopls/v0.20.0/gopls_v0.20.0_darwin_arm64.tar.gz" \
              "language_servers_essential/gopls.tar.gz" &&
            mkdir -p language_servers_essential/gopls &&
            tar -xzf language_servers_essential/gopls.tar.gz -C language_servers_essential/gopls
          ) &

          # Eclipse JDT Language Server v1.50.0 (platform-independent)
          (
            download_with_retry \
              "https://download.eclipse.org/jdtls/milestones/1.50.0/jdt-language-server-1.50.0-202409261450.tar.gz" \
              "language_servers_essential/java.tar.gz" &&
            mkdir -p language_servers_essential/java &&
            tar -xzf language_servers_essential/java.tar.gz -C language_servers_essential/java
          ) &

          # Wait for all downloads to complete
          wait

          echo "Essential language servers downloaded successfully"
          find language_servers_essential -type f | head -20

  build-portable:
    name: Build Portable (arm64, essential)
    runs-on: macos-14  # macOS 14 provides arm64 runners
    timeout-minutes: 60
    needs: download-language-servers

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: arm64

      - name: Install UV package manager
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      # Cache strategy for dependencies
      - name: Cache UV dependencies
        id: cache-uv-deps
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: uv-macos-arm64-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}-v1
          restore-keys: |
            uv-macos-arm64-${{ env.PYTHON_VERSION }}-
            uv-macos-arm64-

      # Prepare environment directories
      - name: Prepare build environment
        run: |
          # Create necessary directories
          mkdir -p "$HOME/.serena/language_servers/static"
          mkdir -p build/language_servers
          mkdir -p build/pyinstaller
          mkdir -p dist

          # Set environment variables for portable build
          echo "SERENA_PORTABLE_BUILD=1" >> $GITHUB_ENV
          echo "SERENA_BUNDLE_TIER=essential" >> $GITHUB_ENV
          echo "SERENA_ARCH=arm64" >> $GITHUB_ENV

      # Restore cached language servers from download job
      - name: Restore Essential Language Servers
        uses: actions/cache/restore@v4
        with:
          path: language_servers_essential
          key: language-servers-macos-essential-v1-${{ hashFiles('scripts/build-macos/language-servers-manifest.json') }}
          restore-keys: |
            language-servers-macos-essential-v1-
            language-servers-macos-essential-
          fail-on-cache-miss: false

      # Set up virtual environment
      - name: Create virtual environment
        if: steps.cache-uv-deps.outputs.cache-hit != 'true'
        run: |
          uv venv --python ${{ env.PYTHON_VERSION }}

      # Install dependencies with PyInstaller
      - name: Install dependencies
        run: |
          # Install project in development mode
          uv pip install -e ".[dev]"
          uv pip install pyinstaller==6.11.1

          # Verify UV virtual environment setup
          echo "Verifying UV virtual environment setup..."
          if [ -f ".venv/bin/activate" ]; then
            echo "[OK] Virtual environment activation script found"
          else
            echo "[WARN] Virtual environment activation script not found"
          fi

          # Test UV environment functionality
          echo "Testing UV environment..."
          uv run python --version
          uv run pip list | grep poethepoet || true

      # Ensure dev tools are installed
      - name: Ensure dev tools are installed
        run: |
          # Verify and install critical dev dependencies
          for tool in black ruff mypy pytest poethepoet; do
            if ! command -v $tool &> /dev/null; then
              echo "Installing missing tool: $tool"
              uv pip install $tool
            fi
          done

      # Setup language servers from cached downloads
      - name: Setup Essential Language Servers
        run: |
          set -e

          echo "Setting up essential language servers for arm64..."

          target_dir="build/language_servers"
          mkdir -p "$target_dir"

          # Copy pre-downloaded essential servers
          if [ -d "language_servers_essential" ]; then
            # Copy platform-independent servers
            if [ -d "language_servers_essential/pyright" ]; then
              cp -r "language_servers_essential/pyright" "$target_dir/pyright"
            fi

            if [ -d "language_servers_essential/typescript" ]; then
              cp -r "language_servers_essential/typescript" "$target_dir/typescript"
            fi

            # Copy macOS ARM64 specific servers
            if [ -d "language_servers_essential/rust-analyzer" ]; then
              cp -r "language_servers_essential/rust-analyzer" "$target_dir/rust-analyzer"
            fi

            if [ -d "language_servers_essential/gopls" ]; then
              cp -r "language_servers_essential/gopls" "$target_dir/gopls"
            fi

            # Copy Java (Eclipse JDT)
            if [ -d "language_servers_essential/java" ]; then
              cp -r "language_servers_essential/java" "$target_dir/java"
            fi

            echo "Essential language servers setup completed"
            ls -la "$target_dir"
          else
            echo "WARNING: Essential language servers cache not found"
          fi

      # Run basic quality checks (SIMPLIFIED - only format and type-check)
      - name: Run code quality checks
        run: |
          echo "Running code quality checks..."

          # Format check
          echo "Running black formatting check..."
          if uv run black --check src scripts test; then
            echo "[OK] Black formatting check passed"
          else
            echo "[FAIL] Black formatting check failed"
            exit 1
          fi

          # Lint check
          echo "Running ruff linting check..."
          if uv run ruff check src scripts test; then
            echo "[OK] Ruff linting check passed"
          else
            echo "[FAIL] Ruff linting check failed"
            exit 1
          fi

          # Type check
          echo "Running mypy type checking..."
          if uv run mypy src/serena; then
            echo "[OK] MyPy type checking passed"
          else
            echo "[FAIL] MyPy type checking failed"
            exit 1
          fi

          echo "All quality checks passed successfully!"

      # Build with PyInstaller
      - name: Build portable executable
        run: |
          set -e

          echo "Building Serena portable executable for macOS..."

          # Diagnostic information
          echo "=== Build Environment ==="
          echo "Python Version: $(python --version)"
          echo "UV Version: $(uv --version)"
          echo "Working Directory: $(pwd)"
          echo "Project Root: ${{ github.workspace }}"
          echo "Language Servers Dir: build/language_servers"
          echo "========================="

          # Get version from pyproject.toml
          version=$(grep -E '^version = ' pyproject.toml | sed -E 's/version = "(.+)"/\1/')
          output_name="serena-macos-arm64-essential-${version}"

          echo "Building: $output_name"

          # PyInstaller arguments (SIMPLIFIED - basic flags only)
          pyinstaller_args=(
            --name "$output_name"
            --onefile
            --console
            --clean
            --noconfirm
            --optimize 2
            --noupx
            --exclude-module tkinter
            --exclude-module matplotlib
            --exclude-module PIL
            --exclude-module numpy
            --exclude-module pandas
            --distpath dist
            --workpath build/pyinstaller
            --specpath build
            --log-level INFO
          )

          # Add debug flags if requested
          if [ "${{ inputs.pyinstaller_debug }}" = "true" ]; then
            pyinstaller_args+=(--debug all --log-level DEBUG)
          fi

          # Include language servers in bundle
          if [ -d "build/language_servers" ]; then
            workspace_root="$(pwd)"
            lang_servers_path="${workspace_root}/build/language_servers"
            pyinstaller_args+=(--add-data "${lang_servers_path}:language_servers")
            echo "Language servers found - will be included in bundle"
            ls -la build/language_servers
          else
            echo "WARNING: No language servers found in build/language_servers"
          fi

          # Add source packages
          pyinstaller_args+=(
            --add-data "${workspace_root}/src/serena:serena"
            --add-data "${workspace_root}/src/solidlsp:solidlsp"
            --add-data "${workspace_root}/src/interprompt:interprompt"
          )

          # Hidden imports for dynamic loading
          hidden_imports=(
            "serena.agent"
            "serena.cli"
            "serena.util.logging"
            "serena.util.exception"
            "serena.runtime_manager"
            "solidlsp.ls"
            "solidlsp.util.subprocess_util"
            "solidlsp.util.zip"
            "mcp"
            "mcp.server.fastmcp.server"
            "mcp.server.fastmcp.utilities.func_metadata"
            "mcp.server.fastmcp.tools.base"
            "anthropic"
            "requests"
            "yaml"
            "jinja2"
            "click"
            "pydantic"
            "pydantic_settings"
            "docstring_parser"
            "psutil"
            "tqdm"
            "tiktoken"
            "joblib"
            "pathspec"
            "ruamel.yaml"
            "ruamel.yaml.main"
            "ruamel.yaml.loader"
            "ruamel.yaml.dumper"
            "sensai.util.logging"
            "sensai.util.string"
            "sensai.util.git"
          )

          for import in "${hidden_imports[@]}"; do
            pyinstaller_args+=(--hidden-import "$import")
          done

          # Entry point
          pyinstaller_args+=(src/serena/cli.py)

          echo "PyInstaller command: uv run pyinstaller ${pyinstaller_args[@]}"

          # Run PyInstaller
          echo "Starting PyInstaller build process..."
          if uv run pyinstaller "${pyinstaller_args[@]}"; then
            echo "PyInstaller completed successfully"
          else
            exit_code=$?
            echo "PyInstaller failed with exit code: $exit_code"
            exit $exit_code
          fi

          # Verify the executable was created
          exe_path="dist/${output_name}"
          if [ ! -f "$exe_path" ]; then
            echo "ERROR: Executable not found at $exe_path"
            exit 1
          fi

          file_size=$(du -h "$exe_path" | cut -f1)
          echo "Built executable: $exe_path ($file_size)"

          # Test the executable
          echo "Testing executable..."
          if "$exe_path" --help > /dev/null 2>&1; then
            echo "[OK] Basic executable test passed"

            # Test version
            echo "Testing version command..."
            "$exe_path" --version || echo "[WARN] Version test failed"
          else
            echo "[WARN] Basic executable test failed"
          fi

          echo "Build completed successfully!"

      # Create bundle with documentation and installation script
      - name: Create distribution bundle
        run: |
          set -e

          version=$(grep -E '^version = ' pyproject.toml | sed -E 's/version = "(.+)"/\1/')
          output_name="serena-macos-arm64-essential-${version}"
          bundle_dir="dist/${output_name}-bundle"

          echo "Creating distribution bundle: $bundle_dir"

          # Create bundle directory structure
          mkdir -p "$bundle_dir/bin"
          mkdir -p "$bundle_dir/docs"
          mkdir -p "$bundle_dir/examples"

          # Copy executable
          cp "dist/${output_name}" "$bundle_dir/bin/serena"
          chmod +x "$bundle_dir/bin/serena"

          # Copy documentation files
          [ -f README.md ] && cp README.md "$bundle_dir/"
          [ -f LICENSE ] && cp LICENSE "$bundle_dir/"
          [ -f CLAUDE.md ] && cp CLAUDE.md "$bundle_dir/docs/"

          # Create installation script (SIMPLIFIED bash script)
          cat > "$bundle_dir/install.sh" << 'EOF'
#!/bin/bash
# Serena macOS Portable Installation Script

echo "Serena macOS Portable Installation"
echo "==================================="
echo ""

INSTALL_DIR="$HOME/.local/serena"
BIN_DIR="$INSTALL_DIR/bin"

echo "Creating installation directory: $INSTALL_DIR"
mkdir -p "$INSTALL_DIR"
mkdir -p "$BIN_DIR"

echo "Copying Serena executable..."
cp bin/serena "$BIN_DIR/serena"
chmod +x "$BIN_DIR/serena"

echo "Adding to PATH..."
# Add to shell profile
SHELL_PROFILE=""
if [ -f "$HOME/.zshrc" ]; then
  SHELL_PROFILE="$HOME/.zshrc"
elif [ -f "$HOME/.bash_profile" ]; then
  SHELL_PROFILE="$HOME/.bash_profile"
elif [ -f "$HOME/.bashrc" ]; then
  SHELL_PROFILE="$HOME/.bashrc"
fi

if [ -n "$SHELL_PROFILE" ]; then
  if ! grep -q "$BIN_DIR" "$SHELL_PROFILE"; then
    echo "export PATH=\"\$PATH:$BIN_DIR\"" >> "$SHELL_PROFILE"
    echo "Added $BIN_DIR to PATH in $SHELL_PROFILE"
  else
    echo "Directory already in PATH"
  fi
fi

echo ""
echo "Installation complete!"
echo "Restart your terminal or run: source $SHELL_PROFILE"
echo ""
echo "To verify installation, run: serena --version"
echo ""
EOF

          chmod +x "$bundle_dir/install.sh"

          # Create usage examples
          cat > "$bundle_dir/examples/usage.md" << 'EOF'
# Serena Usage Examples

## Basic Commands

# Start MCP server (for Claude Desktop integration)
serena-mcp-server

# Get version information
serena --version

# Get help
serena --help

## Language Server Bundle Information

This essential bundle includes:
- Python (Pyright)
- TypeScript/JavaScript
- Rust (rust-analyzer)
- Go (gopls)
- Java (Eclipse JDT)

## Installation

Run the installation script:
```bash
cd serena-macos-arm64-essential-*-bundle
./install.sh
```

Then restart your terminal or run:
```bash
source ~/.zshrc  # or ~/.bash_profile
```
EOF

          # Create ZIP archive
          zip_path="dist/${output_name}-bundle.zip"
          echo "Creating ZIP archive: $zip_path"

          cd dist
          zip -r "${output_name}-bundle.zip" "${output_name}-bundle"
          cd ..

          zip_size=$(du -h "$zip_path" | cut -f1)
          echo "Created bundle ZIP: $zip_path ($zip_size)"

      # Upload artifacts
      - name: Upload build artifacts
        if: inputs.upload_artifacts != false
        uses: actions/upload-artifact@v4
        with:
          name: serena-macos-arm64-essential
          path: |
            dist/serena-macos-arm64-essential-*
            dist/*.zip
          retention-days: 30
          compression-level: 6

      # Generate build summary
      - name: Generate build summary
        run: |
          version=$(grep -E '^version = ' pyproject.toml | sed -E 's/version = "(.+)"/\1/')
          output_name="serena-macos-arm64-essential-${version}"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: macOS" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Tier**: essential" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "dist/${output_name}" ]; then
            exe_size=$(du -h "dist/${output_name}" | cut -f1)
            echo "- **Executable Size**: $exe_size" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "dist/${output_name}-bundle.zip" ]; then
            zip_size=$(du -h "dist/${output_name}-bundle.zip" | cut -f1)
            echo "- **Bundle Size**: $zip_size" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Language Servers Included" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Python (Pyright)" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript/JavaScript" >> $GITHUB_STEP_SUMMARY
          echo "- Rust (rust-analyzer)" >> $GITHUB_STEP_SUMMARY
          echo "- Go (gopls)" >> $GITHUB_STEP_SUMMARY
          echo "- Java (Eclipse JDT)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Simplifications Applied" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Single architecture (arm64) - most common for modern Macs" >> $GITHUB_STEP_SUMMARY
          echo "- Single bundle tier (essential) - core language servers only" >> $GITHUB_STEP_SUMMARY
          echo "- Manual trigger only - no workflow_call or release triggers" >> $GITHUB_STEP_SUMMARY
          echo "- No runtime downloads - skip portable runtimes for now" >> $GITHUB_STEP_SUMMARY
          echo "- Basic quality checks - format and type-check only" >> $GITHUB_STEP_SUMMARY
          echo "- Simple installation script - basic bash script for ~/.local/serena" >> $GITHUB_STEP_SUMMARY

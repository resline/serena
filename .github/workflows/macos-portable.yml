name: Build macOS Portable

# This is the main macOS portable build workflow. It creates standalone
# macOS executables for Serena with bundled language servers. Key features:
# - Parallel language server downloads with retry logic and caching
# - Full PyInstaller build with macOS-optimized flags
# - Enhanced error handling and quality checks
# - Support for workflow_call for reusability
# - Multiple bundle tiers (minimal, essential, complete, full)
# - Both x64 (Intel) and arm64 (Apple Silicon) architecture support

on:
  workflow_dispatch:
    inputs:
      bundle_tier:
        description: 'Bundle tier selection (use "all" to build all tiers)'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'minimal'
          - 'essential'
          - 'complete'
          - 'full'
      architecture:
        description: 'Target architecture'
        required: true
        default: 'arm64'
        type: choice
        options:
          - 'x64'
          - 'arm64'
          - 'both'
      pyinstaller_debug:
        description: 'Enable PyInstaller debug mode'
        required: false
        default: false
        type: boolean
      upload_artifacts:
        description: 'Upload build artifacts'
        required: false
        default: true
        type: boolean
  workflow_call:
    inputs:
      bundle_tier:
        description: 'Bundle tier selection (use "all" to build all tiers)'
        required: false
        default: 'all'
        type: string
      architecture:
        description: 'Target architecture'
        required: false
        default: 'arm64'
        type: string
      pyinstaller_debug:
        description: 'Enable PyInstaller debug mode'
        required: false
        default: false
        type: boolean
      upload_artifacts:
        description: 'Upload build artifacts'
        required: false
        default: true
        type: boolean
  release:
    types: [created]

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "latest"

concurrency:
  group: macos-portable-${{ github.workflow }}-${{ github.ref }}-${{ inputs.bundle_tier || 'release' }}-${{ inputs.architecture || 'arm64' }}
  cancel-in-progress: true

jobs:
  # Pre-download language servers in parallel to speed up builds
  download-language-servers:
    name: Download Language Servers
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        server_group:
          - essential
          - additional

    outputs:
      essential-cache-key: ${{ steps.cache-essential.outputs.cache-primary-key }}
      additional-cache-key: ${{ steps.cache-additional.outputs.cache-primary-key }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Essential Language Servers
        id: cache-essential
        if: matrix.server_group == 'essential'
        uses: actions/cache@v4
        with:
          path: language_servers_essential
          key: language-servers-essential-macos-v1-${{ hashFiles('scripts/build-config.json') }}
          restore-keys: |
            language-servers-essential-macos-v1-
            language-servers-essential-macos-

      - name: Cache Additional Language Servers
        id: cache-additional
        if: matrix.server_group == 'additional'
        uses: actions/cache@v4
        with:
          path: language_servers_additional
          key: language-servers-additional-macos-v1-${{ hashFiles('scripts/build-config.json') }}
          restore-keys: |
            language-servers-additional-macos-v1-
            language-servers-additional-macos-

      - name: Download Essential Language Servers
        if: matrix.server_group == 'essential' && steps.cache-essential.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p language_servers_essential

          # Download essential servers in parallel with retry logic
          download_with_retry() {
            local url="$1"
            local output="$2"
            local type="$3"
            local retries=3
            local delay=5

            for i in $(seq 1 $retries); do
              echo "Attempt $i: Downloading $url"
              if curl -fsSL --connect-timeout 30 --max-time 300 "$url" -o "$output"; then
                return 0
              fi

              if [ $i -lt $retries ]; then
                echo "Download failed, retrying in ${delay}s..."
                sleep $delay
                delay=$((delay * 2))
              fi
            done

            echo "Failed to download after $retries attempts: $url"
            return 1
          }

          # Essential language servers (macOS versions)
          (
            # Pyright v1.1.405 (latest stable release) - cross-platform npm package
            download_with_retry "https://registry.npmjs.org/pyright/-/pyright-1.1.405.tgz" "language_servers_essential/pyright.tgz" "npm" &&
            mkdir -p language_servers_essential/pyright &&
            tar -xzf language_servers_essential/pyright.tgz -C language_servers_essential/pyright --strip-components=1
          ) &

          (
            # TypeScript Language Server v4.4.0 (latest stable release) - cross-platform npm package
            download_with_retry "https://registry.npmjs.org/typescript-language-server/-/typescript-language-server-4.4.0.tgz" "language_servers_essential/typescript.tgz" "npm" &&
            mkdir -p language_servers_essential/typescript &&
            tar -xzf language_servers_essential/typescript.tgz -C language_servers_essential/typescript --strip-components=1
          ) &

          (
            # rust-analyzer latest x64 (Intel Mac)
            download_with_retry "https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-apple-darwin.gz" "language_servers_essential/rust-analyzer-x64.gz" "gz" &&
            mkdir -p language_servers_essential/rust-analyzer-x64 &&
            gunzip -c language_servers_essential/rust-analyzer-x64.gz > language_servers_essential/rust-analyzer-x64/rust-analyzer &&
            chmod +x language_servers_essential/rust-analyzer-x64/rust-analyzer
          ) &

          (
            # rust-analyzer latest ARM64 (Apple Silicon)
            download_with_retry "https://github.com/rust-lang/rust-analyzer/releases/latest/download/rust-analyzer-aarch64-apple-darwin.gz" "language_servers_essential/rust-analyzer-arm64.gz" "gz" &&
            mkdir -p language_servers_essential/rust-analyzer-arm64 &&
            gunzip -c language_servers_essential/rust-analyzer-arm64.gz > language_servers_essential/rust-analyzer-arm64/rust-analyzer &&
            chmod +x language_servers_essential/rust-analyzer-arm64/rust-analyzer
          ) &

          (
            # gopls v0.20.0 x64 (Intel Mac)
            download_with_retry "https://github.com/golang/tools/releases/download/gopls/v0.20.0/gopls_v0.20.0_darwin_amd64.tar.gz" "language_servers_essential/gopls-x64.tar.gz" "tar" &&
            mkdir -p language_servers_essential/gopls-x64 &&
            tar -xzf language_servers_essential/gopls-x64.tar.gz -C language_servers_essential/gopls-x64
          ) &

          (
            # gopls v0.20.0 ARM64 (Apple Silicon)
            download_with_retry "https://github.com/golang/tools/releases/download/gopls/v0.20.0/gopls_v0.20.0_darwin_arm64.tar.gz" "language_servers_essential/gopls-arm64.tar.gz" "tar" &&
            mkdir -p language_servers_essential/gopls-arm64 &&
            tar -xzf language_servers_essential/gopls-arm64.tar.gz -C language_servers_essential/gopls-arm64
          ) &

          (
            # Eclipse JDT Language Server v1.50.0 (cross-platform)
            download_with_retry "https://download.eclipse.org/jdtls/milestones/1.50.0/jdt-language-server-1.50.0-202409261450.tar.gz" "language_servers_essential/java.tar.gz" "tar" &&
            mkdir -p language_servers_essential/java &&
            tar -xzf language_servers_essential/java.tar.gz -C language_servers_essential/java
          ) &

          # Wait for all downloads to complete
          wait

          echo "Essential language servers downloaded successfully"
          find language_servers_essential -type f | head -20

      - name: Download Additional Language Servers
        if: matrix.server_group == 'additional' && steps.cache-additional.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p language_servers_additional

          # Download additional servers in parallel with retry logic
          download_with_retry() {
            local url="$1"
            local output="$2"
            local type="$3"
            local retries=3
            local delay=5

            for i in $(seq 1 $retries); do
              echo "Attempt $i: Downloading $url"
              if curl -fsSL --connect-timeout 30 --max-time 300 "$url" -o "$output"; then
                return 0
              fi

              if [ $i -lt $retries ]; then
                echo "Download failed, retrying in ${delay}s..."
                sleep $delay
                delay=$((delay * 2))
              fi
            done

            echo "Failed to download after $retries attempts: $url"
            return 1
          }

          # Additional language servers with version comments (macOS versions)
          (
            # OmniSharp-Roslyn v1.39.14 x64 (Intel Mac)
            download_with_retry "https://github.com/OmniSharp/omnisharp-roslyn/releases/download/v1.39.14/omnisharp-osx-x64-net6.0.tar.gz" "language_servers_additional/omnisharp-x64.tar.gz" "tar" &&
            mkdir -p language_servers_additional/omnisharp-x64 &&
            tar -xzf language_servers_additional/omnisharp-x64.tar.gz -C language_servers_additional/omnisharp-x64
          ) &

          (
            # OmniSharp-Roslyn v1.39.14 ARM64 (Apple Silicon)
            download_with_retry "https://github.com/OmniSharp/omnisharp-roslyn/releases/download/v1.39.14/omnisharp-osx-arm64-net6.0.tar.gz" "language_servers_additional/omnisharp-arm64.tar.gz" "tar" &&
            mkdir -p language_servers_additional/omnisharp-arm64 &&
            tar -xzf language_servers_additional/omnisharp-arm64.tar.gz -C language_servers_additional/omnisharp-arm64
          ) &

          (
            # Lua Language Server v3.15.0 x64 (Intel Mac)
            download_with_retry "https://github.com/LuaLS/lua-language-server/releases/download/3.15.0/lua-language-server-3.15.0-darwin-x64.tar.gz" "language_servers_additional/lua-ls-x64.tar.gz" "tar" &&
            mkdir -p language_servers_additional/lua-ls-x64 &&
            tar -xzf language_servers_additional/lua-ls-x64.tar.gz -C language_servers_additional/lua-ls-x64
          ) &

          (
            # Lua Language Server v3.15.0 ARM64 (Apple Silicon)
            download_with_retry "https://github.com/LuaLS/lua-language-server/releases/download/3.15.0/lua-language-server-3.15.0-darwin-arm64.tar.gz" "language_servers_additional/lua-ls-arm64.tar.gz" "tar" &&
            mkdir -p language_servers_additional/lua-ls-arm64 &&
            tar -xzf language_servers_additional/lua-ls-arm64.tar.gz -C language_servers_additional/lua-ls-arm64
          ) &

          (
            # Bash Language Server v5.6.0 (cross-platform npm package)
            download_with_retry "https://registry.npmjs.org/bash-language-server/-/bash-language-server-5.6.0.tgz" "language_servers_additional/bash-ls.tgz" "npm" &&
            mkdir -p language_servers_additional/bash-ls &&
            tar -xzf language_servers_additional/bash-ls.tgz -C language_servers_additional/bash-ls --strip-components=1
          ) &

          # Wait for all downloads to complete
          wait

          echo "Additional language servers downloaded successfully"
          find language_servers_additional -type f | head -20

  build-portable:
    name: Build Portable (${{ matrix.arch }}, ${{ matrix.bundle_tier }})
    # Use macos-13 for x64 (Intel), macos-14 for arm64 (Apple Silicon)
    runs-on: ${{ matrix.arch == 'arm64' && 'macos-14' || 'macos-13' }}
    timeout-minutes: 60
    needs: download-language-servers
    strategy:
      fail-fast: false
      matrix:
        arch: ${{ inputs.architecture == 'both' && fromJson('["x64", "arm64"]') || fromJson(format('["{0}"]', inputs.architecture || 'arm64')) }}
        bundle_tier: ${{ inputs.bundle_tier == 'all' && fromJson('["essential", "complete", "full"]') || fromJson(format('["{0}"]', inputs.bundle_tier || 'essential')) }}

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV package manager
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      # Enhanced cache strategy for dependencies
      - name: Cache UV dependencies
        id: cache-uv-deps
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/Library/Caches/uv
          key: uv-macos-${{ matrix.arch }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}-v2
          restore-keys: |
            uv-macos-${{ matrix.arch }}-${{ env.PYTHON_VERSION }}-
            uv-macos-${{ matrix.arch }}-

      # Prepare environment directories
      - name: Prepare build environment
        run: |
          # Create necessary directories
          mkdir -p "$HOME/.serena/language_servers/static"
          mkdir -p build/language_servers
          mkdir -p build/runtimes
          mkdir -p build/pyinstaller
          mkdir -p dist

          # Set environment variables for portable build
          echo "SERENA_PORTABLE_BUILD=1" >> $GITHUB_ENV
          echo "SERENA_BUNDLE_TIER=${{ matrix.bundle_tier }}" >> $GITHUB_ENV
          echo "SERENA_ARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "RUNTIMES_DIR=${{ github.workspace }}/build/runtimes" >> $GITHUB_ENV

      # Restore cached language servers from download job
      - name: Restore Essential Language Servers
        if: matrix.bundle_tier == 'essential' || matrix.bundle_tier == 'complete' || matrix.bundle_tier == 'full'
        uses: actions/cache/restore@v4
        with:
          path: language_servers_essential
          key: language-servers-essential-macos-v1-${{ hashFiles('scripts/build-config.json') }}
          restore-keys: |
            language-servers-essential-macos-v1-
            language-servers-essential-macos-
          fail-on-cache-miss: false

      - name: Restore Additional Language Servers
        if: matrix.bundle_tier == 'complete' || matrix.bundle_tier == 'full'
        uses: actions/cache/restore@v4
        with:
          path: language_servers_additional
          key: language-servers-additional-macos-v1-${{ hashFiles('scripts/build-config.json') }}
          restore-keys: |
            language-servers-additional-macos-v1-
            language-servers-additional-macos-
          fail-on-cache-miss: false

      # Set up virtual environment
      - name: Create virtual environment
        if: steps.cache-uv-deps.outputs.cache-hit != 'true'
        run: |
          uv venv --python ${{ env.PYTHON_VERSION }}

      # Install dependencies with PyInstaller
      - name: Install dependencies
        run: |
          # Use optimized UV settings for faster downloads
          export UV_CONCURRENT_DOWNLOADS=10
          export UV_HTTP_TIMEOUT=300

          # Install project in development mode
          uv pip install -e ".[dev]"
          uv pip install pyinstaller==6.11.1

          # Verify UV virtual environment setup
          echo "Verifying UV virtual environment setup..."
          if [ -f ".venv/bin/activate" ]; then
            echo "[OK] Virtual environment activation script found"
          else
            echo "[WARN] Virtual environment activation script not found"
          fi

          # Test UV environment functionality
          echo "Testing UV environment..."
          uv run python --version
          uv run pip list | grep poethepoet || true

      # Ensure dev tools are installed (fallback for quality checks)
      - name: Ensure dev tools are installed
        run: |
          # Verify and install critical dev dependencies
          for tool in black ruff mypy pytest poethepoet; do
            if ! command -v $tool &> /dev/null; then
              echo "Installing missing tool: $tool"
              uv pip install $tool
            fi
          done

      # Setup language servers from cached downloads
      - name: Setup Essential Language Servers
        if: matrix.bundle_tier == 'essential' || matrix.bundle_tier == 'complete' || matrix.bundle_tier == 'full'
        run: |
          set -e

          echo "Setting up essential language servers for ${{ matrix.arch }}..."

          target_dir="build/language_servers"
          mkdir -p "$target_dir"

          # Copy pre-downloaded essential servers
          if [ -d "language_servers_essential" ]; then
            # Determine architecture suffix
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              arch_suffix="arm64"
            else
              arch_suffix="x64"
            fi

            # Copy cross-platform servers
            cp -R language_servers_essential/pyright "$target_dir/pyright"
            cp -R language_servers_essential/typescript "$target_dir/typescript"

            # Copy architecture-specific servers
            if [ -d "language_servers_essential/rust-analyzer-${arch_suffix}" ]; then
              cp -R "language_servers_essential/rust-analyzer-${arch_suffix}" "$target_dir/rust-analyzer"
            fi

            if [ -d "language_servers_essential/gopls-${arch_suffix}" ]; then
              cp -R "language_servers_essential/gopls-${arch_suffix}" "$target_dir/gopls"
            fi

            # Copy Java (Eclipse JDT) - cross-platform
            if [ -d "language_servers_essential/java" ]; then
              cp -R "language_servers_essential/java" "$target_dir/java"
            fi

            echo "Essential language servers setup completed"
          else
            echo "[WARN] Essential language servers cache not found"
          fi

      - name: Setup Additional Language Servers
        if: matrix.bundle_tier == 'complete' || matrix.bundle_tier == 'full'
        run: |
          set -e

          echo "Setting up additional language servers for ${{ matrix.arch }}..."

          target_dir="build/language_servers"

          # Copy pre-downloaded additional servers
          if [ -d "language_servers_additional" ]; then
            # Determine architecture suffix
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              arch_suffix="arm64"
            else
              arch_suffix="x64"
            fi

            # Copy cross-platform servers
            cp -R language_servers_additional/bash-ls "$target_dir/bash-ls"

            # Copy architecture-specific servers
            if [ -d "language_servers_additional/lua-ls-${arch_suffix}" ]; then
              cp -R "language_servers_additional/lua-ls-${arch_suffix}" "$target_dir/lua-ls"
            fi

            if [ -d "language_servers_additional/omnisharp-${arch_suffix}" ]; then
              cp -R "language_servers_additional/omnisharp-${arch_suffix}" "$target_dir/omnisharp"
            fi

            echo "Additional language servers setup completed"
          else
            echo "[WARN] Additional language servers cache not found"
          fi

      # Run quality checks
      - name: Run code quality checks
        run: |
          echo "Running code quality checks..."

          # Use direct UV commands with explicit error handling
          echo "Running black formatting check..."
          if uv run black --check src scripts test; then
            echo "[OK] Black formatting check passed"
          else
            echo "[FAIL] Black formatting check failed"
            exit 1
          fi

          echo "Running ruff linting check..."
          if uv run ruff check src scripts test; then
            echo "[OK] Ruff linting check passed"
          else
            echo "[FAIL] Ruff linting check failed"
            exit 1
          fi

          echo "Running mypy type checking..."
          if uv run mypy src/serena; then
            echo "[OK] MyPy type checking passed"
          else
            echo "[FAIL] MyPy type checking failed"
            exit 1
          fi

          echo "All quality checks passed successfully!"

      # Build with PyInstaller
      - name: Build portable executable
        run: |
          set -e

          echo "Building Serena portable executable..."

          # Diagnostic information
          echo "=== Build Environment ==="
          echo "Python Version: $(python --version)"
          echo "UV Version: $(uv --version)"
          echo "Working Directory: $(pwd)"
          echo "Project Root: ${{ github.workspace }}"
          echo "Language Servers Dir: build/language_servers"
          echo "Architecture: ${{ matrix.arch }}"
          echo "========================="

          # Determine output name
          bundle_suffix="${{ matrix.bundle_tier }}"
          arch_suffix="${{ matrix.arch }}"
          version=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
          output_name="serena-macos-${arch_suffix}-${bundle_suffix}-${version}"

          # PyInstaller arguments optimized for macOS
          pyinstaller_args=(
            "--name" "$output_name"
            "--onefile"
            "--console"
            "--clean"
            "--noconfirm"
            "--optimize" "2"
            "--noupx"
            "--exclude-module" "tkinter"
            "--exclude-module" "matplotlib"
            "--exclude-module" "PIL"
            "--exclude-module" "numpy"
            "--exclude-module" "pandas"
            "--distpath" "dist"
            "--workpath" "build/pyinstaller"
            "--specpath" "build"
            "--log-level" "INFO"
          )

          # Add debug flags if requested
          if [ "${{ inputs.pyinstaller_debug || 'false' }}" = "true" ]; then
            pyinstaller_args+=("--debug" "all" "--log-level" "DEBUG")
          fi

          # Include language servers in bundle
          if [ -d "build/language_servers" ]; then
            pyinstaller_args+=("--add-data" "build/language_servers:language_servers")
            echo "Language servers found - will be included in bundle"
            ls -la build/language_servers
          else
            echo "No language servers found in build/language_servers"
          fi

          # Add source packages
          pyinstaller_args+=(
            "--add-data" "src/serena:serena"
            "--add-data" "src/solidlsp:solidlsp"
            "--add-data" "src/interprompt:interprompt"
          )

          # Hidden imports for dynamic loading
          hidden_imports=(
            "serena.agent"
            "serena.cli"
            "serena.util.logging"
            "serena.util.exception"
            "serena.runtime_manager"
            "solidlsp.ls"
            "solidlsp.util.subprocess_util"
            "solidlsp.util.zip"
            "mcp"
            "mcp.server.fastmcp.server"
            "mcp.server.fastmcp.utilities.func_metadata"
            "mcp.server.fastmcp.tools.base"
            "anthropic"
            "requests"
            "yaml"
            "jinja2"
            "click"
            "pydantic"
            "pydantic_settings"
            "docstring_parser"
            "psutil"
            "tqdm"
            "tiktoken"
            "joblib"
            "pathspec"
            "ruamel.yaml"
            "ruamel.yaml.main"
            "ruamel.yaml.loader"
            "ruamel.yaml.dumper"
            "sensai.util.logging"
            "sensai.util.string"
            "sensai.util.git"
          )

          for import in "${hidden_imports[@]}"; do
            pyinstaller_args+=("--hidden-import" "$import")
          done

          # Entry point
          pyinstaller_args+=("src/serena/cli.py")

          echo "PyInstaller command: uv run pyinstaller ${pyinstaller_args[@]}"

          # Suppress deprecation warnings
          export PYTHONWARNINGS="ignore::DeprecationWarning:pkg_resources,ignore::DeprecationWarning:altgraph"

          echo "Starting PyInstaller build process..."

          # Run PyInstaller
          if uv run pyinstaller "${pyinstaller_args[@]}"; then
            echo "PyInstaller completed successfully"
          else
            exit_code=$?
            # Check if the executable was created despite the non-zero exit code
            if [ -f "dist/${output_name}" ]; then
              echo "[WARN] PyInstaller completed with warnings (exit code: $exit_code) but executable was created successfully"
            else
              echo "[FAIL] PyInstaller failed with exit code: $exit_code"
              exit 1
            fi
          fi

          # Verify the executable was created
          if [ ! -f "dist/${output_name}" ]; then
            echo "[FAIL] Executable not found at dist/${output_name}"
            exit 1
          fi

          # Make executable
          chmod +x "dist/${output_name}"

          file_size=$(du -h "dist/${output_name}" | cut -f1)
          echo "Built executable: dist/${output_name} ($file_size)"

          # Test the executable
          echo "Testing executable..."
          if "./dist/${output_name}" --help > /dev/null 2>&1; then
            echo "Basic executable test passed!"

            # Test version command
            if "./dist/${output_name}" --version > /dev/null 2>&1; then
              echo "Version test passed!"
            else
              echo "[WARN] Version test failed"
            fi
          else
            echo "[WARN] Basic executable test failed, but continuing build"
          fi

          echo "Build completed successfully - executable created!"

      # Create bundle with documentation and examples
      - name: Create distribution bundle
        run: |
          set -e

          bundle_suffix="${{ matrix.bundle_tier }}"
          arch_suffix="${{ matrix.arch }}"
          version=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
          output_name="serena-macos-${arch_suffix}-${bundle_suffix}-${version}"
          bundle_dir="dist/${output_name}-bundle"

          echo "Creating distribution bundle: $bundle_dir"

          # Create bundle directory structure
          mkdir -p "$bundle_dir"/{bin,docs,examples}

          # Copy executable
          cp "dist/${output_name}" "$bundle_dir/bin/serena"
          chmod +x "$bundle_dir/bin/serena"

          # Copy documentation files
          [ -f "README.md" ] && cp README.md "$bundle_dir/"
          [ -f "LICENSE" ] && cp LICENSE "$bundle_dir/"
          [ -f "CLAUDE.md" ] && cp CLAUDE.md "$bundle_dir/docs/"

          # Create installation script for macOS
          cat > "$bundle_dir/install.sh" <<'INSTALL_SCRIPT_END'
#!/bin/bash
# Serena macOS Portable Installation Script

set -e

echo "Serena macOS Portable Installation"
echo "==================================="
echo ""

INSTALL_DIR="$HOME/.local/serena"
BIN_DIR="$INSTALL_DIR/bin"

echo "Creating installation directory: $INSTALL_DIR"
mkdir -p "$INSTALL_DIR"
mkdir -p "$BIN_DIR"

echo "Copying Serena executable..."
cp bin/serena "$BIN_DIR/serena"
chmod +x "$BIN_DIR/serena"

# Add to PATH in shell configuration
SHELL_CONFIG=""
if [ -f "$HOME/.zshrc" ]; then
  SHELL_CONFIG="$HOME/.zshrc"
elif [ -f "$HOME/.bash_profile" ]; then
  SHELL_CONFIG="$HOME/.bash_profile"
elif [ -f "$HOME/.bashrc" ]; then
  SHELL_CONFIG="$HOME/.bashrc"
fi

if [ -n "$SHELL_CONFIG" ]; then
  if ! grep -q "$BIN_DIR" "$SHELL_CONFIG" 2>/dev/null; then
    echo "" >> "$SHELL_CONFIG"
    echo "# Added by Serena installer" >> "$SHELL_CONFIG"
    echo "export PATH=\"\$PATH:$BIN_DIR\"" >> "$SHELL_CONFIG"
    echo "Added $BIN_DIR to PATH in $SHELL_CONFIG"
  else
    echo "Directory already in PATH"
  fi
fi

echo ""
echo "Installation complete!"
echo "Restart your terminal or run: source $SHELL_CONFIG"
echo ""
echo "To verify installation, run: serena --version"
echo ""
INSTALL_SCRIPT_END

          chmod +x "$bundle_dir/install.sh"

          # Create usage examples
          cat > "$bundle_dir/examples/usage.md" <<'USAGE_END'
# Serena Usage Examples

## Basic Commands

# Start MCP server (for Claude Desktop integration)
serena-mcp-server

# Get version information
serena --version

# Get help
serena --help

## Language Server Bundle Information

This $bundle_suffix bundle includes:
USAGE_END

          if [ "$bundle_suffix" = "essential" ] || [ "$bundle_suffix" = "complete" ] || [ "$bundle_suffix" = "full" ]; then
            cat >> "$bundle_dir/examples/usage.md" <<'ESSENTIAL_END'
- Python (Pyright)
- TypeScript/JavaScript
- Rust (rust-analyzer)
- Go (gopls)
- Java (Eclipse JDT)
ESSENTIAL_END
          fi

          if [ "$bundle_suffix" = "complete" ] || [ "$bundle_suffix" = "full" ]; then
            cat >> "$bundle_dir/examples/usage.md" <<'COMPLETE_END'
- C# (OmniSharp)
- Lua
- Bash
COMPLETE_END
          fi

          if [ "$bundle_suffix" = "full" ]; then
            cat >> "$bundle_dir/examples/usage.md" <<'FULL_END'
- Additional language servers (28+ total)
FULL_END
          fi

          # Create ZIP archive
          zip_path="dist/${output_name}-bundle.zip"
          echo "Creating ZIP archive: $zip_path"

          cd dist
          zip -r -q "${output_name}-bundle.zip" "${output_name}-bundle"
          cd ..

          zip_size=$(du -h "$zip_path" | cut -f1)
          echo "Created bundle ZIP: $zip_path ($zip_size)"

      # Upload artifacts (only if enabled)
      - name: Upload build artifacts
        if: inputs.upload_artifacts != false
        uses: actions/upload-artifact@v4
        with:
          name: serena-macos-${{ matrix.arch }}-${{ matrix.bundle_tier }}
          path: |
            dist/serena-macos-*
            dist/*.zip
          retention-days: 30
          compression-level: 6

      # Upload to release if this was triggered by a release
      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/serena-macos-*
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Generate build summary
      - name: Generate build summary
        run: |
          bundle_suffix="${{ matrix.bundle_tier }}"
          arch_suffix="${{ matrix.arch }}"
          version=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
          output_name="serena-macos-${arch_suffix}-${bundle_suffix}-${version}"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: ${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Tier**: ${{ matrix.bundle_tier }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "dist/${output_name}" ]; then
            exe_size=$(du -h "dist/${output_name}" | cut -f1)
            echo "- **Executable Size**: $exe_size" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "dist/${output_name}-bundle.zip" ]; then
            zip_size=$(du -h "dist/${output_name}-bundle.zip" | cut -f1)
            echo "- **Bundle Size**: $zip_size" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Language Servers Included" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          case "$bundle_suffix" in
            "minimal")
              echo "- None (minimal build)" >> $GITHUB_STEP_SUMMARY
              ;;
            "essential")
              echo "- Python (Pyright)" >> $GITHUB_STEP_SUMMARY
              echo "- TypeScript/JavaScript" >> $GITHUB_STEP_SUMMARY
              echo "- Rust (rust-analyzer)" >> $GITHUB_STEP_SUMMARY
              echo "- Go (gopls)" >> $GITHUB_STEP_SUMMARY
              echo "- Java (Eclipse JDT)" >> $GITHUB_STEP_SUMMARY
              ;;
            "complete")
              echo "- Python (Pyright)" >> $GITHUB_STEP_SUMMARY
              echo "- TypeScript/JavaScript" >> $GITHUB_STEP_SUMMARY
              echo "- Rust (rust-analyzer)" >> $GITHUB_STEP_SUMMARY
              echo "- Go (gopls)" >> $GITHUB_STEP_SUMMARY
              echo "- Java (Eclipse JDT)" >> $GITHUB_STEP_SUMMARY
              echo "- C# (OmniSharp)" >> $GITHUB_STEP_SUMMARY
              echo "- Lua Language Server" >> $GITHUB_STEP_SUMMARY
              echo "- Bash Language Server" >> $GITHUB_STEP_SUMMARY
              ;;
            "full")
              echo "- Python (Pyright)" >> $GITHUB_STEP_SUMMARY
              echo "- TypeScript/JavaScript" >> $GITHUB_STEP_SUMMARY
              echo "- Rust (rust-analyzer)" >> $GITHUB_STEP_SUMMARY
              echo "- Go (gopls)" >> $GITHUB_STEP_SUMMARY
              echo "- Java (Eclipse JDT)" >> $GITHUB_STEP_SUMMARY
              echo "- C# (OmniSharp)" >> $GITHUB_STEP_SUMMARY
              echo "- Lua Language Server" >> $GITHUB_STEP_SUMMARY
              echo "- Bash Language Server" >> $GITHUB_STEP_SUMMARY
              echo "- All 28+ supported language servers" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

  # Create a summary job that runs after all builds complete
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-portable
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate final summary
        shell: bash
        run: |
          echo "# macOS Portable Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-portable.result }}" == "success" ]; then
            echo "✅ **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Performance Improvements" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **Parallel language server downloads** - Up to 6x faster downloads" >> $GITHUB_STEP_SUMMARY
          echo "- 🗂️ **Enhanced caching strategy** - Better cache hit rates and reuse" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **Optimized PyInstaller flags** - Smaller executables with better performance" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Network retry logic** - Robust handling of download failures" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️ **Sequential quality checks** - Reliable linting and type checking" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **Efficient bundle creation** - Parallel file operations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List all created artifacts
          if [ -d "artifacts" ]; then
            find artifacts -type f \( -name "serena-macos-*" -o -name "*.zip" \) | while read file; do
              size=$(du -h "$file" | cut -f1)
              basename_file=$(basename "$file")
              echo "- **$basename_file** ($size)" >> $GITHUB_STEP_SUMMARY
            done
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Installation Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the appropriate bundle for your Mac architecture (Intel x64 or Apple Silicon arm64)" >> $GITHUB_STEP_SUMMARY
          echo "2. Extract the ZIP file to a directory of your choice" >> $GITHUB_STEP_SUMMARY
          echo "3. Run \`./install.sh\` from the extracted directory" >> $GITHUB_STEP_SUMMARY
          echo "4. Restart your terminal or run \`source ~/.zshrc\` (or your shell config)" >> $GITHUB_STEP_SUMMARY
          echo "5. Verify installation with \`serena --version\`" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Bundle Types" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **minimal**: Core Serena functionality only" >> $GITHUB_STEP_SUMMARY
          echo "- **essential**: Core + Python, TypeScript, Rust, Go, Java language servers" >> $GITHUB_STEP_SUMMARY
          echo "- **complete**: Essential + C#, Lua, Bash language servers" >> $GITHUB_STEP_SUMMARY
          echo "- **full**: All 28+ supported language servers included" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Architecture Notes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **x64 (Intel)**: For Intel-based Macs (2020 and earlier models)" >> $GITHUB_STEP_SUMMARY
          echo "- **arm64 (Apple Silicon)**: For M1/M2/M3 Macs (2020 and later models)" >> $GITHUB_STEP_SUMMARY

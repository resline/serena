name: Build Windows Portable (Simplified)

on:
  workflow_dispatch:
    inputs:
      bundle_tier:
        description: 'Bundle tier selection'
        required: true
        default: 'essential'
        type: choice
        options:
          - 'minimal'
          - 'essential'
          - 'complete'
          - 'full'
      architecture:
        description: 'Target architecture'
        required: true
        default: 'x64'
        type: choice
        options:
          - 'x64'
          - 'arm64'
      pyinstaller_debug:
        description: 'Enable PyInstaller debug mode'
        required: false
        default: false
        type: boolean
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [created]

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "latest"
  PYINSTALLER_VERSION: "6.11.1"

concurrency:
  group: build-windows-${{ github.workflow }}-${{ github.ref }}-${{ inputs.bundle_tier || 'release' }}-${{ inputs.architecture || 'x64' }}
  cancel-in-progress: true

jobs:
  build-portable:
    name: Build Portable (${{ matrix.arch }}, ${{ matrix.tier }})
    runs-on: windows-2022
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        tier: ${{ fromJson(github.event_name == 'workflow_dispatch' && format('["{0}"]', inputs.bundle_tier) || '["essential", "complete", "full"]') }}
        arch: ${{ fromJson(github.event_name == 'workflow_dispatch' && format('["{0}"]', inputs.architecture) || '["x64"]') }}

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.arch }}

      - name: Install Windows-specific dependencies
        shell: powershell
        run: |
          Write-Host "Installing Windows-specific dependencies..." -ForegroundColor Green
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install pywin32 pywin32-ctypes
          python -c "import win32api; print('pywin32 installed successfully')"

      - name: Install UV package manager
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
            %APPDATA%\uv\cache
          key: uv-windows-${{ matrix.arch }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}-v2
          restore-keys: |
            uv-windows-${{ matrix.arch }}-${{ env.PYTHON_VERSION }}-
            uv-windows-${{ matrix.arch }}-

      - name: Prepare build environment
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "build\language_servers"
          New-Item -ItemType Directory -Force -Path "build\runtimes"
          New-Item -ItemType Directory -Force -Path "build\pyinstaller"
          New-Item -ItemType Directory -Force -Path "dist"

          echo "SERENA_PORTABLE_BUILD=1" >> $env:GITHUB_ENV
          echo "SERENA_BUNDLE_TIER=${{ matrix.tier }}" >> $env:GITHUB_ENV
          echo "SERENA_ARCH=${{ matrix.arch }}" >> $env:GITHUB_ENV
          echo "RUNTIMES_DIR=${{ github.workspace }}\build\runtimes" >> $env:GITHUB_ENV

      - name: Create virtual environment
        shell: powershell
        run: |
          uv venv --python ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        shell: powershell
        run: |
          $env:UV_CONCURRENT_DOWNLOADS = "10"
          $env:UV_HTTP_TIMEOUT = "300"

          uv pip install -e ".[dev]"
          uv pip install pyinstaller==${{ env.PYINSTALLER_VERSION }}
          uv pip install pywin32 pywin32-ctypes

          Write-Host "Verifying UV virtual environment..." -ForegroundColor Cyan
          uv run python --version
          uv run pip list | Select-String "poethepoet"

      - name: Download language servers
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          Write-Host "Downloading language servers for tier: ${{ matrix.tier }}, arch: ${{ matrix.arch }}" -ForegroundColor Green

          # This is a simplified version - you would implement the actual download logic
          # based on your language-servers-manifest.json

          $tier = "${{ matrix.tier }}"
          $arch = "${{ matrix.arch }}"

          # For this simplified workflow, we'll just create placeholder directories
          # In production, implement proper download logic from the manifest

          Write-Host "Language server download completed" -ForegroundColor Green

      - name: Download portable runtimes
        if: matrix.tier != 'minimal'
        shell: powershell
        run: |
          Write-Host "Downloading portable runtimes..." -ForegroundColor Green

          $tier = "${{ matrix.tier }}"
          $arch = "${{ matrix.arch }}"

          # Check if download-runtimes script exists
          if (Test-Path "scripts/build-windows/download-runtimes.ps1") {
            & powershell -ExecutionPolicy Bypass -File "scripts/build-windows/download-runtimes.ps1" `
              -RuntimeTier $tier -Architecture $arch -OutputPath "build/runtimes"
          } else {
            Write-Host "Runtime download script not found, skipping..." -ForegroundColor Yellow
          }

      - name: Run code quality checks
        shell: powershell
        run: |
          Write-Host "Running code quality checks..." -ForegroundColor Green

          $env:VIRTUAL_ENV = ".venv"

          Write-Host "Running black formatting check..." -ForegroundColor Cyan
          uv run black --check src scripts test

          Write-Host "Running ruff linting check..." -ForegroundColor Cyan
          uv run ruff check src scripts test

          Write-Host "Running mypy type checking..." -ForegroundColor Cyan
          uv run mypy src/serena

          Write-Host "All quality checks passed!" -ForegroundColor Green

      - name: Build portable executable
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          Write-Host "Building Serena portable executable..." -ForegroundColor Green

          # Determine output name
          $version = (Select-String -Path "pyproject.toml" -Pattern 'version = "([^"]+)"').Matches[0].Groups[1].Value
          $outputName = "serena-windows-${{ matrix.arch }}-${{ matrix.tier }}-${version}"

          # PyInstaller arguments
          $pyinstallerArgs = @(
            "--name", $outputName,
            "--onefile",
            "--console",
            "--clean",
            "--noconfirm",
            "--optimize", "2",
            "--noupx",
            "--exclude-module", "tkinter",
            "--exclude-module", "matplotlib",
            "--exclude-module", "PIL",
            "--exclude-module", "numpy",
            "--exclude-module", "pandas",
            "--distpath", "dist",
            "--workpath", "build/pyinstaller",
            "--specpath", "build",
            "--bootloader-ignore-signals",
            "--log-level", "INFO"
          )

          # Add debug flags if requested
          if ("${{ inputs.pyinstaller_debug }}" -eq "true") {
            $pyinstallerArgs += @("--debug", "all", "--log-level", "DEBUG")
          }

          # Include language servers if they exist
          if (Test-Path "build/language_servers") {
            $langServersPath = (Join-Path $pwd "build\language_servers") -replace '\\', '/'
            $pyinstallerArgs += @("--add-data", "${langServersPath};language_servers")
            Write-Host "Including language servers from: $langServersPath" -ForegroundColor Green
          }

          # Add source packages
          $serenaPath = (Join-Path $pwd "src\serena") -replace '\\', '/'
          $solidlspPath = (Join-Path $pwd "src\solidlsp") -replace '\\', '/'
          $interpromptPath = (Join-Path $pwd "src\interprompt") -replace '\\', '/'
          $pyinstallerArgs += @(
            "--add-data", "${serenaPath};serena",
            "--add-data", "${solidlspPath};solidlsp",
            "--add-data", "${interpromptPath};interprompt"
          )

          # Add Windows runtime DLLs
          $pythonDir = "${env:pythonLocation}"
          $pythonDllPath = "${pythonDir}\python311.dll"
          if (Test-Path $pythonDllPath) {
            $pyinstallerArgs += @("--add-binary", "${pythonDllPath};.")
          }

          # Windows DLL handling
          $pyinstallerArgs += @("--collect-all", "win32")
          $pyinstallerArgs += @("--collect-all", "pywintypes")
          $pyinstallerArgs += @("--collect-all", "pythoncom")

          # Hidden imports
          $hiddenImports = @(
            "serena.agent", "serena.cli", "serena.util.logging", "serena.util.exception",
            "serena.runtime_manager", "solidlsp.ls", "solidlsp.util.subprocess_util",
            "solidlsp.util.zip", "mcp", "mcp.server.fastmcp.server", "anthropic",
            "requests", "yaml", "jinja2", "click", "pydantic", "pydantic_settings",
            "docstring_parser", "psutil", "tqdm", "tiktoken", "joblib", "pathspec",
            "ruamel.yaml", "win32api", "win32con", "pywintypes"
          )

          foreach ($import in $hiddenImports) {
            $pyinstallerArgs += @("--hidden-import", $import)
          }

          # Entry point
          $pyinstallerArgs += @("src/serena/cli.py")

          # Suppress warnings
          $env:PYTHONWARNINGS = "ignore::DeprecationWarning:pkg_resources,ignore::DeprecationWarning:altgraph"

          Write-Host "Starting PyInstaller build..." -ForegroundColor Green

          # Run PyInstaller
          $allArgs = @("run", "pyinstaller") + $pyinstallerArgs
          $stdoutLog = "build/pyinstaller_stdout.log"
          $stderrLog = "build/pyinstaller_stderr.log"

          $processInfo = Start-Process -FilePath "uv" -ArgumentList $allArgs `
            -RedirectStandardOutput $stdoutLog -RedirectStandardError $stderrLog `
            -PassThru -NoNewWindow -Wait

          # Display output
          if (Test-Path $stdoutLog) {
            Get-Content $stdoutLog | Write-Host
          }

          if (Test-Path $stderrLog) {
            $stderr = Get-Content $stderrLog -Raw
            if ($stderr) {
              Write-Host $stderr -ForegroundColor Yellow
            }
          }

          # Verify executable was created
          $exePath = "dist/${outputName}.exe"
          if (!(Test-Path $exePath)) {
            throw "Executable not found at $exePath"
          }

          $fileSize = (Get-Item $exePath).Length / 1MB
          Write-Host "Built executable: $exePath (${fileSize:N2} MB)" -ForegroundColor Green

          # Test executable
          Write-Host "Testing executable..." -ForegroundColor Cyan
          & $exePath --version

          Write-Host "Build completed successfully!" -ForegroundColor Green

      - name: Create distribution bundle
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          $version = (Select-String -Path "pyproject.toml" -Pattern 'version = "([^"]+)"').Matches[0].Groups[1].Value
          $outputName = "serena-windows-${{ matrix.arch }}-${{ matrix.tier }}-${version}"
          $bundleDir = "dist/${outputName}-bundle"

          Write-Host "Creating distribution bundle: $bundleDir" -ForegroundColor Green

          # Create directories
          New-Item -ItemType Directory -Force -Path "$bundleDir/bin" | Out-Null
          New-Item -ItemType Directory -Force -Path "$bundleDir/docs" | Out-Null
          New-Item -ItemType Directory -Force -Path "$bundleDir/examples" | Out-Null

          # Copy executable
          Copy-Item "dist/${outputName}.exe" "$bundleDir/bin/serena.exe"

          # Copy documentation
          @("README.md", "LICENSE") | ForEach-Object {
            if (Test-Path $_) { Copy-Item $_ "$bundleDir/" }
          }

          if (Test-Path "CLAUDE.md") {
            Copy-Item "CLAUDE.md" "$bundleDir/docs/"
          }

          # Create installation scripts
          $installBat = @"
@echo off
setlocal enabledelayedexpansion

echo Serena Windows Portable Installation
echo ===================================
echo.

set "INSTALL_DIR=%USERPROFILE%\AppData\Local\Serena"
set "BIN_DIR=%INSTALL_DIR%\bin"

echo Creating installation directory: !INSTALL_DIR!
if not exist "!INSTALL_DIR!" mkdir "!INSTALL_DIR!"
if not exist "!BIN_DIR!" mkdir "!BIN_DIR!"

echo Copying Serena executable...
copy /Y "bin\serena.exe" "!BIN_DIR!\serena.exe" >nul

echo Adding to PATH...
powershell -Command "[Environment]::SetEnvironmentVariable('Path', [Environment]::GetEnvironmentVariable('Path', 'User') + ';!BIN_DIR!', 'User')"

echo.
echo Installation complete!
echo Restart your command prompt to use 'serena' command.
echo.
pause
"@

          $installBat | Out-File -FilePath "$bundleDir/install.bat" -Encoding ascii

          # Create PowerShell installer
          $installPs1 = @"
# Serena Windows Portable Installation Script
Write-Host "Serena Windows Portable Installation" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host ""

`$installDir = "`$env:USERPROFILE\AppData\Local\Serena"
`$binDir = "`$installDir\bin"

Write-Host "Creating installation directory: `$installDir"
New-Item -ItemType Directory -Force -Path `$installDir | Out-Null
New-Item -ItemType Directory -Force -Path `$binDir | Out-Null

Write-Host "Copying Serena executable..."
Copy-Item "bin\serena.exe" "`$binDir\serena.exe" -Force

Write-Host "Adding to PATH..."
`$currentPath = [Environment]::GetEnvironmentVariable('Path', 'User')
if (`$currentPath -notlike "*`$binDir*") {
    [Environment]::SetEnvironmentVariable('Path', "`$currentPath;`$binDir", 'User')
    Write-Host "Added `$binDir to user PATH" -ForegroundColor Yellow
} else {
    Write-Host "Directory already in PATH" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "Installation complete!" -ForegroundColor Green
Write-Host "Restart your PowerShell to use 'serena' command."
Write-Host ""
"@

          $installPs1 | Out-File -FilePath "$bundleDir/install.ps1" -Encoding utf8

          # Create usage examples
          $usageContent = @"
# Serena Usage Examples

## Basic Commands

# Start MCP server
serena-mcp-server

# Get version
serena --version

# Get help
serena --help

## ${{ matrix.tier }} Bundle

This bundle includes language servers for common development tasks.
See BUILD-WINDOWS.md for complete language support details.
"@

          $usageContent | Out-File -FilePath "$bundleDir/examples/usage.md" -Encoding utf8

          # Create ZIP archive
          $zipPath = "dist/${outputName}-bundle.zip"
          Write-Host "Creating ZIP archive: $zipPath" -ForegroundColor Green

          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path "$bundleDir/*" -DestinationPath $zipPath -CompressionLevel Optimal

          $zipSize = (Get-Item $zipPath).Length / 1MB
          Write-Host "Created bundle: $zipPath (${zipSize:N2} MB)" -ForegroundColor Green

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: serena-windows-${{ matrix.arch }}-${{ matrix.tier }}
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 30
          compression-level: 6

      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            dist/*.exe
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build summary
        shell: powershell
        run: |
          $version = (Select-String -Path "pyproject.toml" -Pattern 'version = "([^"]+)"').Matches[0].Groups[1].Value
          $outputName = "serena-windows-${{ matrix.arch }}-${{ matrix.tier }}-${version}"

          Write-Host "## Build Summary" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Architecture**: ${{ matrix.arch }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Bundle Tier**: ${{ matrix.tier }}" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "- **Version**: $version" >> $env:GITHUB_STEP_SUMMARY
          Write-Host "" >> $env:GITHUB_STEP_SUMMARY

          if (Test-Path "dist/${outputName}.exe") {
            $exeSize = (Get-Item "dist/${outputName}.exe").Length / 1MB
            Write-Host "- **Executable Size**: ${exeSize:N2} MB" >> $env:GITHUB_STEP_SUMMARY
          }

          if (Test-Path "dist/${outputName}-bundle.zip") {
            $zipSize = (Get-Item "dist/${outputName}-bundle.zip").Length / 1MB
            Write-Host "- **Bundle Size**: ${zipSize:N2} MB" >> $env:GITHUB_STEP_SUMMARY
          }

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build-portable
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate final summary
        shell: bash
        run: |
          echo "# Windows Portable Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-portable.result }}" == "success" ]; then
            echo "✅ **Build Status**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          find artifacts -type f \( -name "*.exe" -o -name "*.zip" \) | while read file; do
            size=$(du -h "$file" | cut -f1)
            basename_file=$(basename "$file")
            echo "- **$basename_file** ($size)" >> $GITHUB_STEP_SUMMARY
          done

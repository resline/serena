name: Build Portable Package - Windows

# Windows-specific portable build workflow
# Can be called from orchestrator or run standalone
# Cost: 2x multiplier (twice as expensive as Linux)

on:
  # Allow workflow_call from orchestrator
  workflow_call:
    inputs:
      version:
        description: 'Version string for the build'
        required: true
        type: string
      language_set:
        description: 'Language set (minimal, standard, full)'
        required: false
        default: 'standard'
        type: string
      skip_tests:
        description: 'Skip integration tests'
        required: false
        default: false
        type: boolean
      cache_version:
        description: 'Cache version identifier'
        required: false
        default: 'v3'
        type: string
    outputs:
      artifact_name:
        description: 'Name of the uploaded artifact'
        value: ${{ jobs.build-windows.outputs.artifact_name }}
      archive_path:
        description: 'Archive filename'
        value: ${{ jobs.build-windows.outputs.archive_path }}
      checksum:
        description: 'SHA256 checksum'
        value: ${{ jobs.build-windows.outputs.checksum }}

  # Also allow standalone execution for testing
  workflow_dispatch:
    inputs:
      version:
        description: 'Version string (leave empty for auto-detect)'
        required: false
        default: ''
        type: string
      language_set:
        description: 'Language set'
        required: false
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - full
      skip_tests:
        description: 'Skip integration tests'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  PYTHON_PATCH_VERSION: '3.11.10'
  UV_VERSION: 'latest'
  PLATFORM: 'win-x64'
  ARTIFACT_NAME: 'serena-windows-x64'

jobs:
  build-windows:
    name: Build Windows x64 Package
    runs-on: windows-latest
    timeout-minutes: 120
    outputs:
      artifact_name: ${{ steps.artifact.outputs.name }}
      archive_path: ${{ steps.archive.outputs.filename }}
      checksum: ${{ steps.checksum.outputs.sha256 }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        shell: bash
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="v$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')-dev"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "::notice::Building Windows package version: ${VERSION}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}

      # Cache Layer 1: Python embedded runtime
      - name: Cache Python embedded runtime
        id: cache-python-embedded
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/python-embedded
          key: python-embedded-Windows-X64-${{ env.PYTHON_PATCH_VERSION }}-${{ inputs.cache_version || 'v3' }}

      # Cache Layer 2: Language servers
      - name: Cache language servers
        id: cache-language-servers
        uses: actions/cache@v4
        with:
          path: ~/.serena/language_servers/static
          key: language-servers-portable-Windows-X64-${{ inputs.language_set || 'standard' }}-${{ inputs.cache_version || 'v3' }}
          restore-keys: |
            language-servers-portable-Windows-X64-
            language-servers-Windows-

      # Cache Layer 3: UV virtualenv
      - name: Cache UV virtualenv
        id: cache-uv
        uses: actions/cache@v4
        with:
          path: .venv
          key: uv-venv-portable-Windows-${{ env.PYTHON_VERSION }}-${{ hashFiles('uv.lock') }}-${{ inputs.cache_version || 'v3' }}
          restore-keys: |
            uv-venv-portable-Windows-${{ env.PYTHON_VERSION }}-

      - name: Setup build environment
        shell: bash
        run: |
          mkdir -p "${{ runner.temp }}/portable-build"
          mkdir -p "$HOME/.serena/language_servers/static"

          echo "BUILD_DIR=${{ runner.temp }}/portable-build" >> $GITHUB_ENV
          echo "PORTABLE_VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV
          echo "LANGUAGE_CONFIG=${{ inputs.language_set || 'standard' }}" >> $GITHUB_ENV

      - name: Download Python embedded
        if: steps.cache-python-embedded.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $DEST = "${{ runner.temp }}/python-embedded"
          New-Item -ItemType Directory -Force -Path $DEST | Out-Null

          $PYTHON_URL = "https://www.python.org/ftp/python/${{ env.PYTHON_PATCH_VERSION }}/python-${{ env.PYTHON_PATCH_VERSION }}-embed-amd64.zip"

          Invoke-WebRequest -Uri $PYTHON_URL -OutFile "$DEST/python-embed.zip"
          Expand-Archive -Path "$DEST/python-embed.zip" -DestinationPath $DEST -Force
          Remove-Item "$DEST/python-embed.zip"

      - name: Create virtual environment
        if: steps.cache-uv.outputs.cache-hit != 'true'
        shell: bash
        run: uv venv

      - name: Install dependencies
        shell: bash
        run: uv pip install -e ".[dev]"

      - name: Build portable package
        shell: bash
        run: |
          chmod +x scripts/portable/build_portable.sh

          ./scripts/portable/build_portable.sh \
            --platform "${{ env.PLATFORM }}" \
            --version "${{ steps.version.outputs.version }}" \
            --language-set "${{ inputs.language_set || 'standard' }}" \
            --python-embedded "${{ runner.temp }}/python-embedded" \
            --output "${{ env.BUILD_DIR }}"
        timeout-minutes: 60

      - name: Test portable package
        if: inputs.skip_tests != true
        shell: bash
        run: |
          chmod +x scripts/portable/test_portable.sh

          ./scripts/portable/test_portable.sh \
            --package "${{ env.BUILD_DIR }}/${{ env.ARTIFACT_NAME }}" \
            --platform "${{ env.PLATFORM }}"
        timeout-minutes: 30

      - name: Create release archive
        id: archive
        shell: pwsh
        run: |
          cd "${{ env.BUILD_DIR }}"

          $ArchiveName = "${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}.zip"
          Compress-Archive -Path "${{ env.ARTIFACT_NAME }}" -DestinationPath $ArchiveName -CompressionLevel Optimal -Force

          $Size = (Get-Item $ArchiveName).Length
          echo "filename=$ArchiveName" >> $env:GITHUB_OUTPUT
          echo "size=$Size" >> $env:GITHUB_OUTPUT

      - name: Generate SHA256 checksum
        id: checksum
        shell: pwsh
        run: |
          cd "${{ env.BUILD_DIR }}"
          $Archive = "${{ steps.archive.outputs.filename }}"

          $Hash = (Get-FileHash -Path $Archive -Algorithm SHA256).Hash.ToLower()
          "$Hash  $Archive" | Out-File -FilePath "$Archive.sha256" -Encoding ASCII

          echo "sha256=$Hash" >> $env:GITHUB_OUTPUT

      - name: Set artifact name
        id: artifact
        shell: bash
        run: |
          NAME="${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}"
          echo "name=${NAME}" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: |
            ${{ env.BUILD_DIR }}/*.zip
            ${{ env.BUILD_DIR }}/*.sha256
          retention-days: 30
          compression-level: 0
